ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"tach_critical_timer.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	tach_critical_timer_initVar
  19              		.bss
  20              		.type	tach_critical_timer_initVar, %object
  21              		.size	tach_critical_timer_initVar, 1
  22              	tach_critical_timer_initVar:
  23 0000 00       		.space	1
  24              		.section	.text.tach_critical_timer_Init,"ax",%progbits
  25              		.align	2
  26              		.global	tach_critical_timer_Init
  27              		.thumb
  28              		.thumb_func
  29              		.type	tach_critical_timer_Init, %function
  30              	tach_critical_timer_Init:
  31              	.LFB0:
  32              		.file 1 "Generated_Source\\PSoC5\\tach_critical_timer.c"
   1:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/tach_critical_timer.c **** * File Name: tach_critical_timer.c
   3:Generated_Source\PSoC5/tach_critical_timer.c **** * Version 2.70
   4:Generated_Source\PSoC5/tach_critical_timer.c **** *
   5:Generated_Source\PSoC5/tach_critical_timer.c **** * Description:
   6:Generated_Source\PSoC5/tach_critical_timer.c **** *  The Timer component consists of a 8, 16, 24 or 32-bit timer with
   7:Generated_Source\PSoC5/tach_critical_timer.c **** *  a selectable period between 2 and 2^Width - 1.  The timer may free run
   8:Generated_Source\PSoC5/tach_critical_timer.c **** *  or be used as a capture timer as well.  The capture can be initiated
   9:Generated_Source\PSoC5/tach_critical_timer.c **** *  by a positive or negative edge signal as well as via software.
  10:Generated_Source\PSoC5/tach_critical_timer.c **** *  A trigger input can be programmed to enable the timer on rising edge
  11:Generated_Source\PSoC5/tach_critical_timer.c **** *  falling edge, either edge or continous run.
  12:Generated_Source\PSoC5/tach_critical_timer.c **** *  Interrupts may be generated due to a terminal count condition
  13:Generated_Source\PSoC5/tach_critical_timer.c **** *  or a capture event.
  14:Generated_Source\PSoC5/tach_critical_timer.c **** *
  15:Generated_Source\PSoC5/tach_critical_timer.c **** * Note:
  16:Generated_Source\PSoC5/tach_critical_timer.c **** *
  17:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
  18:Generated_Source\PSoC5/tach_critical_timer.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:Generated_Source\PSoC5/tach_critical_timer.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:Generated_Source\PSoC5/tach_critical_timer.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:Generated_Source\PSoC5/tach_critical_timer.c **** * the software package with which this file was provided.
  22:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************/
  23:Generated_Source\PSoC5/tach_critical_timer.c **** 
  24:Generated_Source\PSoC5/tach_critical_timer.c **** #include "tach_critical_timer.h"
  25:Generated_Source\PSoC5/tach_critical_timer.c **** 
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 2


  26:Generated_Source\PSoC5/tach_critical_timer.c **** uint8 tach_critical_timer_initVar = 0u;
  27:Generated_Source\PSoC5/tach_critical_timer.c **** 
  28:Generated_Source\PSoC5/tach_critical_timer.c **** 
  29:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
  30:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_Init
  31:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
  32:Generated_Source\PSoC5/tach_critical_timer.c **** *
  33:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
  34:Generated_Source\PSoC5/tach_critical_timer.c **** *  Initialize to the schematic state
  35:Generated_Source\PSoC5/tach_critical_timer.c **** *
  36:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
  37:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
  38:Generated_Source\PSoC5/tach_critical_timer.c **** *
  39:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
  40:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
  41:Generated_Source\PSoC5/tach_critical_timer.c **** *
  42:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
  43:Generated_Source\PSoC5/tach_critical_timer.c **** void tach_critical_timer_Init(void) 
  44:Generated_Source\PSoC5/tach_critical_timer.c **** {
  33              		.loc 1 44 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 8
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 82B0     		sub	sp, sp, #8
  42              		.cfi_def_cfa_offset 16
  43 0004 00AF     		add	r7, sp, #0
  44              		.cfi_def_cfa_register 7
  45:Generated_Source\PSoC5/tach_critical_timer.c ****     #if(!tach_critical_timer_UsingFixedFunction)
  46:Generated_Source\PSoC5/tach_critical_timer.c ****             /* Interrupt State Backup for Critical Region*/
  47:Generated_Source\PSoC5/tach_critical_timer.c ****             uint8 tach_critical_timer_interruptState;
  48:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* Interrupt state back up for Fixed Function only */
  49:Generated_Source\PSoC5/tach_critical_timer.c **** 
  50:Generated_Source\PSoC5/tach_critical_timer.c ****     #if (tach_critical_timer_UsingFixedFunction)
  51:Generated_Source\PSoC5/tach_critical_timer.c ****         /* Clear all bits but the enable bit (if it's already set) for Timer operation */
  52:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_CONTROL &= tach_critical_timer_CTRL_ENABLE;
  53:Generated_Source\PSoC5/tach_critical_timer.c **** 
  54:Generated_Source\PSoC5/tach_critical_timer.c ****         /* Clear the mode bits for continuous run mode */
  55:Generated_Source\PSoC5/tach_critical_timer.c ****         #if (CY_PSOC5A)
  56:Generated_Source\PSoC5/tach_critical_timer.c ****             tach_critical_timer_CONTROL2 &= ((uint8)(~tach_critical_timer_CTRL_MODE_MASK));
  57:Generated_Source\PSoC5/tach_critical_timer.c ****         #endif /* Clear bits in CONTROL2 only in PSOC5A */
  58:Generated_Source\PSoC5/tach_critical_timer.c **** 
  59:Generated_Source\PSoC5/tach_critical_timer.c ****         #if (CY_PSOC3 || CY_PSOC5LP)
  60:Generated_Source\PSoC5/tach_critical_timer.c ****             tach_critical_timer_CONTROL3 &= ((uint8)(~tach_critical_timer_CTRL_MODE_MASK));
  61:Generated_Source\PSoC5/tach_critical_timer.c ****         #endif /* CONTROL3 register exists only in PSoC3 OR PSoC5LP */
  62:Generated_Source\PSoC5/tach_critical_timer.c **** 
  63:Generated_Source\PSoC5/tach_critical_timer.c ****         /* Check if One Shot mode is enabled i.e. RunMode !=0*/
  64:Generated_Source\PSoC5/tach_critical_timer.c ****         #if (tach_critical_timer_RunModeUsed != 0x0u)
  65:Generated_Source\PSoC5/tach_critical_timer.c ****             /* Set 3rd bit of Control register to enable one shot mode */
  66:Generated_Source\PSoC5/tach_critical_timer.c ****             tach_critical_timer_CONTROL |= 0x04u;
  67:Generated_Source\PSoC5/tach_critical_timer.c ****         #endif /* One Shot enabled only when RunModeUsed is not Continuous*/
  68:Generated_Source\PSoC5/tach_critical_timer.c **** 
  69:Generated_Source\PSoC5/tach_critical_timer.c ****         #if (tach_critical_timer_RunModeUsed == 2)
  70:Generated_Source\PSoC5/tach_critical_timer.c ****             #if (CY_PSOC5A)
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 3


  71:Generated_Source\PSoC5/tach_critical_timer.c ****                 /* Set last 2 bits of control2 register if one shot(halt on
  72:Generated_Source\PSoC5/tach_critical_timer.c ****                 interrupt) is enabled*/
  73:Generated_Source\PSoC5/tach_critical_timer.c ****                 tach_critical_timer_CONTROL2 |= 0x03u;
  74:Generated_Source\PSoC5/tach_critical_timer.c ****             #endif /* Set One-Shot Halt on Interrupt bit in CONTROL2 for PSoC5A */
  75:Generated_Source\PSoC5/tach_critical_timer.c **** 
  76:Generated_Source\PSoC5/tach_critical_timer.c ****             #if (CY_PSOC3 || CY_PSOC5LP)
  77:Generated_Source\PSoC5/tach_critical_timer.c ****                 /* Set last 2 bits of control3 register if one shot(halt on
  78:Generated_Source\PSoC5/tach_critical_timer.c ****                 interrupt) is enabled*/
  79:Generated_Source\PSoC5/tach_critical_timer.c ****                 tach_critical_timer_CONTROL3 |= 0x03u;
  80:Generated_Source\PSoC5/tach_critical_timer.c ****             #endif /* Set One-Shot Halt on Interrupt bit in CONTROL3 for PSoC3 or PSoC5LP */
  81:Generated_Source\PSoC5/tach_critical_timer.c **** 
  82:Generated_Source\PSoC5/tach_critical_timer.c ****         #endif /* Remove section if One Shot Halt on Interrupt is not enabled */
  83:Generated_Source\PSoC5/tach_critical_timer.c **** 
  84:Generated_Source\PSoC5/tach_critical_timer.c ****         #if (tach_critical_timer_UsingHWEnable != 0)
  85:Generated_Source\PSoC5/tach_critical_timer.c ****             #if (CY_PSOC5A)
  86:Generated_Source\PSoC5/tach_critical_timer.c ****                 /* Set the default Run Mode of the Timer to Continuous */
  87:Generated_Source\PSoC5/tach_critical_timer.c ****                 tach_critical_timer_CONTROL2 |= tach_critical_timer_CTRL_MODE_PULSEWIDTH;
  88:Generated_Source\PSoC5/tach_critical_timer.c ****             #endif /* Set Continuous Run Mode in CONTROL2 for PSoC5A */
  89:Generated_Source\PSoC5/tach_critical_timer.c **** 
  90:Generated_Source\PSoC5/tach_critical_timer.c ****             #if (CY_PSOC3 || CY_PSOC5LP)
  91:Generated_Source\PSoC5/tach_critical_timer.c ****                 /* Clear and Set ROD and COD bits of CFG2 register */
  92:Generated_Source\PSoC5/tach_critical_timer.c ****                 tach_critical_timer_CONTROL3 &= ((uint8)(~tach_critical_timer_CTRL_RCOD_MASK));
  93:Generated_Source\PSoC5/tach_critical_timer.c ****                 tach_critical_timer_CONTROL3 |= tach_critical_timer_CTRL_RCOD;
  94:Generated_Source\PSoC5/tach_critical_timer.c **** 
  95:Generated_Source\PSoC5/tach_critical_timer.c ****                 /* Clear and Enable the HW enable bit in CFG2 register */
  96:Generated_Source\PSoC5/tach_critical_timer.c ****                 tach_critical_timer_CONTROL3 &= ((uint8)(~tach_critical_timer_CTRL_ENBL_MASK));
  97:Generated_Source\PSoC5/tach_critical_timer.c ****                 tach_critical_timer_CONTROL3 |= tach_critical_timer_CTRL_ENBL;
  98:Generated_Source\PSoC5/tach_critical_timer.c **** 
  99:Generated_Source\PSoC5/tach_critical_timer.c ****                 /* Set the default Run Mode of the Timer to Continuous */
 100:Generated_Source\PSoC5/tach_critical_timer.c ****                 tach_critical_timer_CONTROL3 |= tach_critical_timer_CTRL_MODE_CONTINUOUS;
 101:Generated_Source\PSoC5/tach_critical_timer.c ****             #endif /* Set Continuous Run Mode in CONTROL3 for PSoC3ES3 or PSoC5A */
 102:Generated_Source\PSoC5/tach_critical_timer.c **** 
 103:Generated_Source\PSoC5/tach_critical_timer.c ****         #endif /* Configure Run Mode with hardware enable */
 104:Generated_Source\PSoC5/tach_critical_timer.c **** 
 105:Generated_Source\PSoC5/tach_critical_timer.c ****         /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 106:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_RT1 &= ((uint8)(~tach_critical_timer_RT1_MASK));
 107:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_RT1 |= tach_critical_timer_SYNC;
 108:Generated_Source\PSoC5/tach_critical_timer.c **** 
 109:Generated_Source\PSoC5/tach_critical_timer.c ****         /*Enable DSI Sync all all inputs of the Timer*/
 110:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_RT1 &= ((uint8)(~tach_critical_timer_SYNCDSI_MASK));
 111:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_RT1 |= tach_critical_timer_SYNCDSI_EN;
 112:Generated_Source\PSoC5/tach_critical_timer.c **** 
 113:Generated_Source\PSoC5/tach_critical_timer.c ****         /* Set the IRQ to use the status register interrupts */
 114:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_CONTROL2 |= tach_critical_timer_CTRL2_IRQ_SEL;
 115:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* Configuring registers of fixed function implementation */
 116:Generated_Source\PSoC5/tach_critical_timer.c **** 
 117:Generated_Source\PSoC5/tach_critical_timer.c ****     /* Set Initial values from Configuration */
 118:Generated_Source\PSoC5/tach_critical_timer.c ****     tach_critical_timer_WritePeriod(tach_critical_timer_INIT_PERIOD);
  45              		.loc 1 118 0
  46 0006 40F2CF70 		movw	r0, #1999
  47 000a FFF7FEFF 		bl	tach_critical_timer_WritePeriod
 119:Generated_Source\PSoC5/tach_critical_timer.c ****     tach_critical_timer_WriteCounter(tach_critical_timer_INIT_PERIOD);
  48              		.loc 1 119 0
  49 000e 40F2CF70 		movw	r0, #1999
  50 0012 FFF7FEFF 		bl	tach_critical_timer_WriteCounter
 120:Generated_Source\PSoC5/tach_critical_timer.c **** 
 121:Generated_Source\PSoC5/tach_critical_timer.c ****     #if (tach_critical_timer_UsingHWCaptureCounter)/* Capture counter is enabled */
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 4


 122:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_CAPTURE_COUNT_CTRL |= tach_critical_timer_CNTR_ENABLE;
 123:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_SetCaptureCount(tach_critical_timer_INIT_CAPTURE_COUNT);
 124:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* Configure capture counter value */
 125:Generated_Source\PSoC5/tach_critical_timer.c **** 
 126:Generated_Source\PSoC5/tach_critical_timer.c ****     #if (!tach_critical_timer_UsingFixedFunction)
 127:Generated_Source\PSoC5/tach_critical_timer.c ****         #if (tach_critical_timer_SoftwareCaptureMode)
 128:Generated_Source\PSoC5/tach_critical_timer.c ****             tach_critical_timer_SetCaptureMode(tach_critical_timer_INIT_CAPTURE_MODE);
 129:Generated_Source\PSoC5/tach_critical_timer.c ****         #endif /* Set Capture Mode for UDB implementation if capture mode is software controlled */
 130:Generated_Source\PSoC5/tach_critical_timer.c **** 
 131:Generated_Source\PSoC5/tach_critical_timer.c ****         #if (tach_critical_timer_SoftwareTriggerMode)
 132:Generated_Source\PSoC5/tach_critical_timer.c ****             #if (!tach_critical_timer_UDB_CONTROL_REG_REMOVED)
 133:Generated_Source\PSoC5/tach_critical_timer.c ****                 if (0u == (tach_critical_timer_CONTROL & tach_critical_timer__B_TIMER__TM_SOFTWARE)
 134:Generated_Source\PSoC5/tach_critical_timer.c ****                 {
 135:Generated_Source\PSoC5/tach_critical_timer.c ****                     tach_critical_timer_SetTriggerMode(tach_critical_timer_INIT_TRIGGER_MODE);
 136:Generated_Source\PSoC5/tach_critical_timer.c ****                 }
 137:Generated_Source\PSoC5/tach_critical_timer.c ****             #endif /* (!tach_critical_timer_UDB_CONTROL_REG_REMOVED) */
 138:Generated_Source\PSoC5/tach_critical_timer.c ****         #endif /* Set trigger mode for UDB Implementation if trigger mode is software controlled */
 139:Generated_Source\PSoC5/tach_critical_timer.c **** 
 140:Generated_Source\PSoC5/tach_critical_timer.c ****         /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critica
 141:Generated_Source\PSoC5/tach_critical_timer.c ****         /* Enter Critical Region*/
 142:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_interruptState = CyEnterCriticalSection();
  51              		.loc 1 142 0
  52 0016 FFF7FEFF 		bl	CyEnterCriticalSection
  53 001a 0346     		mov	r3, r0
  54 001c FB71     		strb	r3, [r7, #7]
 143:Generated_Source\PSoC5/tach_critical_timer.c **** 
 144:Generated_Source\PSoC5/tach_critical_timer.c ****         /* Use the interrupt output of the status register for IRQ output */
 145:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_STATUS_AUX_CTRL |= tach_critical_timer_STATUS_ACTL_INT_EN_MASK;
  55              		.loc 1 145 0
  56 001e 0A4A     		ldr	r2, .L2
  57 0020 094B     		ldr	r3, .L2
  58 0022 1B78     		ldrb	r3, [r3]
  59 0024 DBB2     		uxtb	r3, r3
  60 0026 43F01003 		orr	r3, r3, #16
  61 002a DBB2     		uxtb	r3, r3
  62 002c 1370     		strb	r3, [r2]
 146:Generated_Source\PSoC5/tach_critical_timer.c **** 
 147:Generated_Source\PSoC5/tach_critical_timer.c ****         /* Exit Critical Region*/
 148:Generated_Source\PSoC5/tach_critical_timer.c ****         CyExitCriticalSection(tach_critical_timer_interruptState);
  63              		.loc 1 148 0
  64 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  65 0030 1846     		mov	r0, r3
  66 0032 FFF7FEFF 		bl	CyExitCriticalSection
 149:Generated_Source\PSoC5/tach_critical_timer.c **** 
 150:Generated_Source\PSoC5/tach_critical_timer.c ****         #if (tach_critical_timer_EnableTriggerMode)
 151:Generated_Source\PSoC5/tach_critical_timer.c ****             tach_critical_timer_EnableTrigger();
 152:Generated_Source\PSoC5/tach_critical_timer.c ****         #endif /* Set Trigger enable bit for UDB implementation in the control register*/
 153:Generated_Source\PSoC5/tach_critical_timer.c **** 		
 154:Generated_Source\PSoC5/tach_critical_timer.c **** 		
 155:Generated_Source\PSoC5/tach_critical_timer.c ****         #if (tach_critical_timer_InterruptOnCaptureCount && !tach_critical_timer_UDB_CONTROL_REG_RE
 156:Generated_Source\PSoC5/tach_critical_timer.c ****             tach_critical_timer_SetInterruptCount(tach_critical_timer_INIT_INT_CAPTURE_COUNT);
 157:Generated_Source\PSoC5/tach_critical_timer.c ****         #endif /* Set interrupt count in UDB implementation if interrupt count feature is checked.*
 158:Generated_Source\PSoC5/tach_critical_timer.c **** 
 159:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_ClearFIFO();
  67              		.loc 1 159 0
  68 0036 FFF7FEFF 		bl	tach_critical_timer_ClearFIFO
 160:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* Configure additional features of UDB implementation */
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 5


 161:Generated_Source\PSoC5/tach_critical_timer.c **** 
 162:Generated_Source\PSoC5/tach_critical_timer.c ****     tach_critical_timer_SetInterruptMode(tach_critical_timer_INIT_INTERRUPT_MODE);
  69              		.loc 1 162 0
  70 003a 0020     		movs	r0, #0
  71 003c FFF7FEFF 		bl	tach_critical_timer_SetInterruptMode
 163:Generated_Source\PSoC5/tach_critical_timer.c **** }
  72              		.loc 1 163 0
  73 0040 0837     		adds	r7, r7, #8
  74              		.cfi_def_cfa_offset 8
  75 0042 BD46     		mov	sp, r7
  76              		.cfi_def_cfa_register 13
  77              		@ sp needed
  78 0044 80BD     		pop	{r7, pc}
  79              	.L3:
  80 0046 00BF     		.align	2
  81              	.L2:
  82 0048 91640040 		.word	1073767569
  83              		.cfi_endproc
  84              	.LFE0:
  85              		.size	tach_critical_timer_Init, .-tach_critical_timer_Init
  86              		.section	.text.tach_critical_timer_Enable,"ax",%progbits
  87              		.align	2
  88              		.global	tach_critical_timer_Enable
  89              		.thumb
  90              		.thumb_func
  91              		.type	tach_critical_timer_Enable, %function
  92              	tach_critical_timer_Enable:
  93              	.LFB1:
 164:Generated_Source\PSoC5/tach_critical_timer.c **** 
 165:Generated_Source\PSoC5/tach_critical_timer.c **** 
 166:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 167:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_Enable
 168:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 169:Generated_Source\PSoC5/tach_critical_timer.c **** *
 170:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 171:Generated_Source\PSoC5/tach_critical_timer.c **** *  Enable the Timer
 172:Generated_Source\PSoC5/tach_critical_timer.c **** *
 173:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 174:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 175:Generated_Source\PSoC5/tach_critical_timer.c **** *
 176:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 177:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 178:Generated_Source\PSoC5/tach_critical_timer.c **** *
 179:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 180:Generated_Source\PSoC5/tach_critical_timer.c **** void tach_critical_timer_Enable(void) 
 181:Generated_Source\PSoC5/tach_critical_timer.c **** {
  94              		.loc 1 181 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 1, uses_anonymous_args = 0
  98              		@ link register save eliminated.
  99 0000 80B4     		push	{r7}
 100              		.cfi_def_cfa_offset 4
 101              		.cfi_offset 7, -4
 102 0002 00AF     		add	r7, sp, #0
 103              		.cfi_def_cfa_register 7
 182:Generated_Source\PSoC5/tach_critical_timer.c ****     /* Globally Enable the Fixed Function Block chosen */
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 6


 183:Generated_Source\PSoC5/tach_critical_timer.c ****     #if (tach_critical_timer_UsingFixedFunction)
 184:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_GLOBAL_ENABLE |= tach_critical_timer_BLOCK_EN_MASK;
 185:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_GLOBAL_STBY_ENABLE |= tach_critical_timer_BLOCK_STBY_EN_MASK;
 186:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* Set Enable bit for enabling Fixed function timer*/
 187:Generated_Source\PSoC5/tach_critical_timer.c **** 
 188:Generated_Source\PSoC5/tach_critical_timer.c ****     /* Remove assignment if control register is removed */
 189:Generated_Source\PSoC5/tach_critical_timer.c ****     #if (!tach_critical_timer_UDB_CONTROL_REG_REMOVED || tach_critical_timer_UsingFixedFunction)
 190:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_CONTROL |= tach_critical_timer_CTRL_ENABLE;
 104              		.loc 1 190 0
 105 0004 054A     		ldr	r2, .L5
 106 0006 054B     		ldr	r3, .L5
 107 0008 1B78     		ldrb	r3, [r3]
 108 000a DBB2     		uxtb	r3, r3
 109 000c 63F07F03 		orn	r3, r3, #127
 110 0010 DBB2     		uxtb	r3, r3
 111 0012 1370     		strb	r3, [r2]
 191:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* Remove assignment if control register is removed */
 192:Generated_Source\PSoC5/tach_critical_timer.c **** }
 112              		.loc 1 192 0
 113 0014 BD46     		mov	sp, r7
 114              		.cfi_def_cfa_register 13
 115              		@ sp needed
 116 0016 5DF8047B 		ldr	r7, [sp], #4
 117              		.cfi_restore 7
 118              		.cfi_def_cfa_offset 0
 119 001a 7047     		bx	lr
 120              	.L6:
 121              		.align	2
 122              	.L5:
 123 001c 72640040 		.word	1073767538
 124              		.cfi_endproc
 125              	.LFE1:
 126              		.size	tach_critical_timer_Enable, .-tach_critical_timer_Enable
 127              		.section	.text.tach_critical_timer_Start,"ax",%progbits
 128              		.align	2
 129              		.global	tach_critical_timer_Start
 130              		.thumb
 131              		.thumb_func
 132              		.type	tach_critical_timer_Start, %function
 133              	tach_critical_timer_Start:
 134              	.LFB2:
 193:Generated_Source\PSoC5/tach_critical_timer.c **** 
 194:Generated_Source\PSoC5/tach_critical_timer.c **** 
 195:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 196:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_Start
 197:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 198:Generated_Source\PSoC5/tach_critical_timer.c **** *
 199:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 200:Generated_Source\PSoC5/tach_critical_timer.c **** *  The start function initializes the timer with the default values, the
 201:Generated_Source\PSoC5/tach_critical_timer.c **** *  enables the timerto begin counting.  It does not enable interrupts,
 202:Generated_Source\PSoC5/tach_critical_timer.c **** *  the EnableInt command should be called if interrupt generation is required.
 203:Generated_Source\PSoC5/tach_critical_timer.c **** *
 204:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 205:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 206:Generated_Source\PSoC5/tach_critical_timer.c **** *
 207:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 208:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 7


 209:Generated_Source\PSoC5/tach_critical_timer.c **** *
 210:Generated_Source\PSoC5/tach_critical_timer.c **** * Global variables:
 211:Generated_Source\PSoC5/tach_critical_timer.c **** *  tach_critical_timer_initVar: Is modified when this function is called for the
 212:Generated_Source\PSoC5/tach_critical_timer.c **** *   first time. Is used to ensure that initialization happens only once.
 213:Generated_Source\PSoC5/tach_critical_timer.c **** *
 214:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 215:Generated_Source\PSoC5/tach_critical_timer.c **** void tach_critical_timer_Start(void) 
 216:Generated_Source\PSoC5/tach_critical_timer.c **** {
 135              		.loc 1 216 0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 1, uses_anonymous_args = 0
 139 0000 80B5     		push	{r7, lr}
 140              		.cfi_def_cfa_offset 8
 141              		.cfi_offset 7, -8
 142              		.cfi_offset 14, -4
 143 0002 00AF     		add	r7, sp, #0
 144              		.cfi_def_cfa_register 7
 217:Generated_Source\PSoC5/tach_critical_timer.c ****     if(tach_critical_timer_initVar == 0u)
 145              		.loc 1 217 0
 146 0004 054B     		ldr	r3, .L9
 147 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 148 0008 002B     		cmp	r3, #0
 149 000a 04D1     		bne	.L8
 218:Generated_Source\PSoC5/tach_critical_timer.c ****     {
 219:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_Init();
 150              		.loc 1 219 0
 151 000c FFF7FEFF 		bl	tach_critical_timer_Init
 220:Generated_Source\PSoC5/tach_critical_timer.c **** 
 221:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_initVar = 1u;   /* Clear this bit for Initialization */
 152              		.loc 1 221 0
 153 0010 024B     		ldr	r3, .L9
 154 0012 0122     		movs	r2, #1
 155 0014 1A70     		strb	r2, [r3]
 156              	.L8:
 222:Generated_Source\PSoC5/tach_critical_timer.c ****     }
 223:Generated_Source\PSoC5/tach_critical_timer.c **** 
 224:Generated_Source\PSoC5/tach_critical_timer.c ****     /* Enable the Timer */
 225:Generated_Source\PSoC5/tach_critical_timer.c ****     tach_critical_timer_Enable();
 157              		.loc 1 225 0
 158 0016 FFF7FEFF 		bl	tach_critical_timer_Enable
 226:Generated_Source\PSoC5/tach_critical_timer.c **** }
 159              		.loc 1 226 0
 160 001a 80BD     		pop	{r7, pc}
 161              	.L10:
 162              		.align	2
 163              	.L9:
 164 001c 00000000 		.word	tach_critical_timer_initVar
 165              		.cfi_endproc
 166              	.LFE2:
 167              		.size	tach_critical_timer_Start, .-tach_critical_timer_Start
 168              		.section	.text.tach_critical_timer_Stop,"ax",%progbits
 169              		.align	2
 170              		.global	tach_critical_timer_Stop
 171              		.thumb
 172              		.thumb_func
 173              		.type	tach_critical_timer_Stop, %function
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 8


 174              	tach_critical_timer_Stop:
 175              	.LFB3:
 227:Generated_Source\PSoC5/tach_critical_timer.c **** 
 228:Generated_Source\PSoC5/tach_critical_timer.c **** 
 229:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 230:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_Stop
 231:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 232:Generated_Source\PSoC5/tach_critical_timer.c **** *
 233:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 234:Generated_Source\PSoC5/tach_critical_timer.c **** *  The stop function halts the timer, but does not change any modes or disable
 235:Generated_Source\PSoC5/tach_critical_timer.c **** *  interrupts.
 236:Generated_Source\PSoC5/tach_critical_timer.c **** *
 237:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 238:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 239:Generated_Source\PSoC5/tach_critical_timer.c **** *
 240:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 241:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 242:Generated_Source\PSoC5/tach_critical_timer.c **** *
 243:Generated_Source\PSoC5/tach_critical_timer.c **** * Side Effects: If the Enable mode is set to Hardware only then this function
 244:Generated_Source\PSoC5/tach_critical_timer.c **** *               has no effect on the operation of the timer.
 245:Generated_Source\PSoC5/tach_critical_timer.c **** *
 246:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 247:Generated_Source\PSoC5/tach_critical_timer.c **** void tach_critical_timer_Stop(void) 
 248:Generated_Source\PSoC5/tach_critical_timer.c **** {
 176              		.loc 1 248 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 1, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 181 0000 80B4     		push	{r7}
 182              		.cfi_def_cfa_offset 4
 183              		.cfi_offset 7, -4
 184 0002 00AF     		add	r7, sp, #0
 185              		.cfi_def_cfa_register 7
 249:Generated_Source\PSoC5/tach_critical_timer.c ****     /* Disable Timer */
 250:Generated_Source\PSoC5/tach_critical_timer.c ****     #if(!tach_critical_timer_UDB_CONTROL_REG_REMOVED || tach_critical_timer_UsingFixedFunction)
 251:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_CONTROL &= ((uint8)(~tach_critical_timer_CTRL_ENABLE));
 186              		.loc 1 251 0
 187 0004 054A     		ldr	r2, .L12
 188 0006 054B     		ldr	r3, .L12
 189 0008 1B78     		ldrb	r3, [r3]
 190 000a DBB2     		uxtb	r3, r3
 191 000c 03F07F03 		and	r3, r3, #127
 192 0010 DBB2     		uxtb	r3, r3
 193 0012 1370     		strb	r3, [r2]
 252:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* Remove assignment if control register is removed */
 253:Generated_Source\PSoC5/tach_critical_timer.c **** 
 254:Generated_Source\PSoC5/tach_critical_timer.c ****     /* Globally disable the Fixed Function Block chosen */
 255:Generated_Source\PSoC5/tach_critical_timer.c ****     #if (tach_critical_timer_UsingFixedFunction)
 256:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_GLOBAL_ENABLE &= ((uint8)(~tach_critical_timer_BLOCK_EN_MASK));
 257:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_GLOBAL_STBY_ENABLE &= ((uint8)(~tach_critical_timer_BLOCK_STBY_EN_MASK)
 258:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* Disable global enable for the Timer Fixed function block to stop the Timer*/
 259:Generated_Source\PSoC5/tach_critical_timer.c **** }
 194              		.loc 1 259 0
 195 0014 BD46     		mov	sp, r7
 196              		.cfi_def_cfa_register 13
 197              		@ sp needed
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 9


 198 0016 5DF8047B 		ldr	r7, [sp], #4
 199              		.cfi_restore 7
 200              		.cfi_def_cfa_offset 0
 201 001a 7047     		bx	lr
 202              	.L13:
 203              		.align	2
 204              	.L12:
 205 001c 72640040 		.word	1073767538
 206              		.cfi_endproc
 207              	.LFE3:
 208              		.size	tach_critical_timer_Stop, .-tach_critical_timer_Stop
 209              		.section	.text.tach_critical_timer_SetInterruptMode,"ax",%progbits
 210              		.align	2
 211              		.global	tach_critical_timer_SetInterruptMode
 212              		.thumb
 213              		.thumb_func
 214              		.type	tach_critical_timer_SetInterruptMode, %function
 215              	tach_critical_timer_SetInterruptMode:
 216              	.LFB4:
 260:Generated_Source\PSoC5/tach_critical_timer.c **** 
 261:Generated_Source\PSoC5/tach_critical_timer.c **** 
 262:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 263:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_SetInterruptMode
 264:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 265:Generated_Source\PSoC5/tach_critical_timer.c **** *
 266:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 267:Generated_Source\PSoC5/tach_critical_timer.c **** *  This function selects which of the interrupt inputs may cause an interrupt.
 268:Generated_Source\PSoC5/tach_critical_timer.c **** *  The twosources are caputure and terminal.  One, both or neither may
 269:Generated_Source\PSoC5/tach_critical_timer.c **** *  be selected.
 270:Generated_Source\PSoC5/tach_critical_timer.c **** *
 271:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 272:Generated_Source\PSoC5/tach_critical_timer.c **** *  interruptMode:   This parameter is used to enable interrups on either/or
 273:Generated_Source\PSoC5/tach_critical_timer.c **** *                   terminal count or capture.
 274:Generated_Source\PSoC5/tach_critical_timer.c **** *
 275:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 276:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 277:Generated_Source\PSoC5/tach_critical_timer.c **** *
 278:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 279:Generated_Source\PSoC5/tach_critical_timer.c **** void tach_critical_timer_SetInterruptMode(uint8 interruptMode) 
 280:Generated_Source\PSoC5/tach_critical_timer.c **** {
 217              		.loc 1 280 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 8
 220              		@ frame_needed = 1, uses_anonymous_args = 0
 221              		@ link register save eliminated.
 222 0000 80B4     		push	{r7}
 223              		.cfi_def_cfa_offset 4
 224              		.cfi_offset 7, -4
 225 0002 83B0     		sub	sp, sp, #12
 226              		.cfi_def_cfa_offset 16
 227 0004 00AF     		add	r7, sp, #0
 228              		.cfi_def_cfa_register 7
 229 0006 0346     		mov	r3, r0
 230 0008 FB71     		strb	r3, [r7, #7]
 281:Generated_Source\PSoC5/tach_critical_timer.c ****     tach_critical_timer_STATUS_MASK = interruptMode;
 231              		.loc 1 281 0
 232 000a 044A     		ldr	r2, .L15
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 10


 233 000c FB79     		ldrb	r3, [r7, #7]
 234 000e 1370     		strb	r3, [r2]
 282:Generated_Source\PSoC5/tach_critical_timer.c **** }
 235              		.loc 1 282 0
 236 0010 0C37     		adds	r7, r7, #12
 237              		.cfi_def_cfa_offset 4
 238 0012 BD46     		mov	sp, r7
 239              		.cfi_def_cfa_register 13
 240              		@ sp needed
 241 0014 5DF8047B 		ldr	r7, [sp], #4
 242              		.cfi_restore 7
 243              		.cfi_def_cfa_offset 0
 244 0018 7047     		bx	lr
 245              	.L16:
 246 001a 00BF     		.align	2
 247              	.L15:
 248 001c 81640040 		.word	1073767553
 249              		.cfi_endproc
 250              	.LFE4:
 251              		.size	tach_critical_timer_SetInterruptMode, .-tach_critical_timer_SetInterruptMode
 252              		.section	.text.tach_critical_timer_SoftwareCapture,"ax",%progbits
 253              		.align	2
 254              		.global	tach_critical_timer_SoftwareCapture
 255              		.thumb
 256              		.thumb_func
 257              		.type	tach_critical_timer_SoftwareCapture, %function
 258              	tach_critical_timer_SoftwareCapture:
 259              	.LFB5:
 283:Generated_Source\PSoC5/tach_critical_timer.c **** 
 284:Generated_Source\PSoC5/tach_critical_timer.c **** 
 285:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 286:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_SoftwareCapture
 287:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 288:Generated_Source\PSoC5/tach_critical_timer.c **** *
 289:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 290:Generated_Source\PSoC5/tach_critical_timer.c **** *  This function forces a capture independent of the capture signal.
 291:Generated_Source\PSoC5/tach_critical_timer.c **** *
 292:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 293:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 294:Generated_Source\PSoC5/tach_critical_timer.c **** *
 295:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 296:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 297:Generated_Source\PSoC5/tach_critical_timer.c **** *
 298:Generated_Source\PSoC5/tach_critical_timer.c **** * Side Effects:
 299:Generated_Source\PSoC5/tach_critical_timer.c **** *  An existing hardware capture could be overwritten.
 300:Generated_Source\PSoC5/tach_critical_timer.c **** *
 301:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 302:Generated_Source\PSoC5/tach_critical_timer.c **** void tach_critical_timer_SoftwareCapture(void) 
 303:Generated_Source\PSoC5/tach_critical_timer.c **** {
 260              		.loc 1 303 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 1, uses_anonymous_args = 0
 264              		@ link register save eliminated.
 265 0000 80B4     		push	{r7}
 266              		.cfi_def_cfa_offset 4
 267              		.cfi_offset 7, -4
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 11


 268 0002 00AF     		add	r7, sp, #0
 269              		.cfi_def_cfa_register 7
 304:Generated_Source\PSoC5/tach_critical_timer.c ****     /* Generate a software capture by reading the counter register */
 305:Generated_Source\PSoC5/tach_critical_timer.c ****     #if(tach_critical_timer_UsingFixedFunction)
 306:Generated_Source\PSoC5/tach_critical_timer.c ****         (void)CY_GET_REG16(tach_critical_timer_COUNTER_LSB_PTR);
 307:Generated_Source\PSoC5/tach_critical_timer.c ****     #else
 308:Generated_Source\PSoC5/tach_critical_timer.c ****         (void)CY_GET_REG8(tach_critical_timer_COUNTER_LSB_PTR_8BIT);
 270              		.loc 1 308 0
 271 0004 024B     		ldr	r3, .L18
 272 0006 1B78     		ldrb	r3, [r3]
 309:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif/* (tach_critical_timer_UsingFixedFunction) */
 310:Generated_Source\PSoC5/tach_critical_timer.c ****     /* Capture Data is now in the FIFO */
 311:Generated_Source\PSoC5/tach_critical_timer.c **** }
 273              		.loc 1 311 0
 274 0008 BD46     		mov	sp, r7
 275              		.cfi_def_cfa_register 13
 276              		@ sp needed
 277 000a 5DF8047B 		ldr	r7, [sp], #4
 278              		.cfi_restore 7
 279              		.cfi_def_cfa_offset 0
 280 000e 7047     		bx	lr
 281              	.L19:
 282              		.align	2
 283              	.L18:
 284 0010 00640040 		.word	1073767424
 285              		.cfi_endproc
 286              	.LFE5:
 287              		.size	tach_critical_timer_SoftwareCapture, .-tach_critical_timer_SoftwareCapture
 288              		.section	.text.tach_critical_timer_ReadStatusRegister,"ax",%progbits
 289              		.align	2
 290              		.global	tach_critical_timer_ReadStatusRegister
 291              		.thumb
 292              		.thumb_func
 293              		.type	tach_critical_timer_ReadStatusRegister, %function
 294              	tach_critical_timer_ReadStatusRegister:
 295              	.LFB6:
 312:Generated_Source\PSoC5/tach_critical_timer.c **** 
 313:Generated_Source\PSoC5/tach_critical_timer.c **** 
 314:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 315:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_ReadStatusRegister
 316:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 317:Generated_Source\PSoC5/tach_critical_timer.c **** *
 318:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 319:Generated_Source\PSoC5/tach_critical_timer.c **** *  Reads the status register and returns it's state. This function should use
 320:Generated_Source\PSoC5/tach_critical_timer.c **** *  defined types for the bit-field information as the bits in this register may
 321:Generated_Source\PSoC5/tach_critical_timer.c **** *  be permuteable.
 322:Generated_Source\PSoC5/tach_critical_timer.c **** *
 323:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 324:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 325:Generated_Source\PSoC5/tach_critical_timer.c **** *
 326:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 327:Generated_Source\PSoC5/tach_critical_timer.c **** *  The contents of the status register
 328:Generated_Source\PSoC5/tach_critical_timer.c **** *
 329:Generated_Source\PSoC5/tach_critical_timer.c **** * Side Effects:
 330:Generated_Source\PSoC5/tach_critical_timer.c **** *  Status register bits may be clear on read.
 331:Generated_Source\PSoC5/tach_critical_timer.c **** *
 332:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 12


 333:Generated_Source\PSoC5/tach_critical_timer.c **** uint8   tach_critical_timer_ReadStatusRegister(void) 
 334:Generated_Source\PSoC5/tach_critical_timer.c **** {
 296              		.loc 1 334 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 1, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 301 0000 80B4     		push	{r7}
 302              		.cfi_def_cfa_offset 4
 303              		.cfi_offset 7, -4
 304 0002 00AF     		add	r7, sp, #0
 305              		.cfi_def_cfa_register 7
 335:Generated_Source\PSoC5/tach_critical_timer.c ****     return (tach_critical_timer_STATUS);
 306              		.loc 1 335 0
 307 0004 034B     		ldr	r3, .L22
 308 0006 1B78     		ldrb	r3, [r3]
 309 0008 DBB2     		uxtb	r3, r3
 336:Generated_Source\PSoC5/tach_critical_timer.c **** }
 310              		.loc 1 336 0
 311 000a 1846     		mov	r0, r3
 312 000c BD46     		mov	sp, r7
 313              		.cfi_def_cfa_register 13
 314              		@ sp needed
 315 000e 5DF8047B 		ldr	r7, [sp], #4
 316              		.cfi_restore 7
 317              		.cfi_def_cfa_offset 0
 318 0012 7047     		bx	lr
 319              	.L23:
 320              		.align	2
 321              	.L22:
 322 0014 61640040 		.word	1073767521
 323              		.cfi_endproc
 324              	.LFE6:
 325              		.size	tach_critical_timer_ReadStatusRegister, .-tach_critical_timer_ReadStatusRegister
 326              		.section	.text.tach_critical_timer_ReadControlRegister,"ax",%progbits
 327              		.align	2
 328              		.global	tach_critical_timer_ReadControlRegister
 329              		.thumb
 330              		.thumb_func
 331              		.type	tach_critical_timer_ReadControlRegister, %function
 332              	tach_critical_timer_ReadControlRegister:
 333              	.LFB7:
 337:Generated_Source\PSoC5/tach_critical_timer.c **** 
 338:Generated_Source\PSoC5/tach_critical_timer.c **** 
 339:Generated_Source\PSoC5/tach_critical_timer.c **** #if (!tach_critical_timer_UDB_CONTROL_REG_REMOVED) /* Remove API if control register is unused */
 340:Generated_Source\PSoC5/tach_critical_timer.c **** 
 341:Generated_Source\PSoC5/tach_critical_timer.c **** 
 342:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 343:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_ReadControlRegister
 344:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 345:Generated_Source\PSoC5/tach_critical_timer.c **** *
 346:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 347:Generated_Source\PSoC5/tach_critical_timer.c **** *  Reads the control register and returns it's value.
 348:Generated_Source\PSoC5/tach_critical_timer.c **** *
 349:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 350:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 351:Generated_Source\PSoC5/tach_critical_timer.c **** *
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 13


 352:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 353:Generated_Source\PSoC5/tach_critical_timer.c **** *  The contents of the control register
 354:Generated_Source\PSoC5/tach_critical_timer.c **** *
 355:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 356:Generated_Source\PSoC5/tach_critical_timer.c **** uint8 tach_critical_timer_ReadControlRegister(void) 
 357:Generated_Source\PSoC5/tach_critical_timer.c **** {
 334              		.loc 1 357 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 1, uses_anonymous_args = 0
 338              		@ link register save eliminated.
 339 0000 80B4     		push	{r7}
 340              		.cfi_def_cfa_offset 4
 341              		.cfi_offset 7, -4
 342 0002 00AF     		add	r7, sp, #0
 343              		.cfi_def_cfa_register 7
 358:Generated_Source\PSoC5/tach_critical_timer.c ****     #if (!tach_critical_timer_UDB_CONTROL_REG_REMOVED) 
 359:Generated_Source\PSoC5/tach_critical_timer.c ****         return ((uint8)tach_critical_timer_CONTROL);
 344              		.loc 1 359 0
 345 0004 034B     		ldr	r3, .L26
 346 0006 1B78     		ldrb	r3, [r3]
 347 0008 DBB2     		uxtb	r3, r3
 360:Generated_Source\PSoC5/tach_critical_timer.c ****     #else
 361:Generated_Source\PSoC5/tach_critical_timer.c ****         return (0);
 362:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* (!tach_critical_timer_UDB_CONTROL_REG_REMOVED) */
 363:Generated_Source\PSoC5/tach_critical_timer.c **** }
 348              		.loc 1 363 0
 349 000a 1846     		mov	r0, r3
 350 000c BD46     		mov	sp, r7
 351              		.cfi_def_cfa_register 13
 352              		@ sp needed
 353 000e 5DF8047B 		ldr	r7, [sp], #4
 354              		.cfi_restore 7
 355              		.cfi_def_cfa_offset 0
 356 0012 7047     		bx	lr
 357              	.L27:
 358              		.align	2
 359              	.L26:
 360 0014 72640040 		.word	1073767538
 361              		.cfi_endproc
 362              	.LFE7:
 363              		.size	tach_critical_timer_ReadControlRegister, .-tach_critical_timer_ReadControlRegister
 364              		.section	.text.tach_critical_timer_WriteControlRegister,"ax",%progbits
 365              		.align	2
 366              		.global	tach_critical_timer_WriteControlRegister
 367              		.thumb
 368              		.thumb_func
 369              		.type	tach_critical_timer_WriteControlRegister, %function
 370              	tach_critical_timer_WriteControlRegister:
 371              	.LFB8:
 364:Generated_Source\PSoC5/tach_critical_timer.c **** 
 365:Generated_Source\PSoC5/tach_critical_timer.c **** 
 366:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 367:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_WriteControlRegister
 368:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 369:Generated_Source\PSoC5/tach_critical_timer.c **** *
 370:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 14


 371:Generated_Source\PSoC5/tach_critical_timer.c **** *  Sets the bit-field of the control register.
 372:Generated_Source\PSoC5/tach_critical_timer.c **** *
 373:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 374:Generated_Source\PSoC5/tach_critical_timer.c **** *  control: The contents of the control register
 375:Generated_Source\PSoC5/tach_critical_timer.c **** *
 376:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 377:Generated_Source\PSoC5/tach_critical_timer.c **** *
 378:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 379:Generated_Source\PSoC5/tach_critical_timer.c **** void tach_critical_timer_WriteControlRegister(uint8 control) 
 380:Generated_Source\PSoC5/tach_critical_timer.c **** {
 372              		.loc 1 380 0
 373              		.cfi_startproc
 374              		@ args = 0, pretend = 0, frame = 8
 375              		@ frame_needed = 1, uses_anonymous_args = 0
 376              		@ link register save eliminated.
 377 0000 80B4     		push	{r7}
 378              		.cfi_def_cfa_offset 4
 379              		.cfi_offset 7, -4
 380 0002 83B0     		sub	sp, sp, #12
 381              		.cfi_def_cfa_offset 16
 382 0004 00AF     		add	r7, sp, #0
 383              		.cfi_def_cfa_register 7
 384 0006 0346     		mov	r3, r0
 385 0008 FB71     		strb	r3, [r7, #7]
 381:Generated_Source\PSoC5/tach_critical_timer.c ****     #if (!tach_critical_timer_UDB_CONTROL_REG_REMOVED) 
 382:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_CONTROL = control;
 386              		.loc 1 382 0
 387 000a 044A     		ldr	r2, .L29
 388 000c FB79     		ldrb	r3, [r7, #7]
 389 000e 1370     		strb	r3, [r2]
 383:Generated_Source\PSoC5/tach_critical_timer.c ****     #else
 384:Generated_Source\PSoC5/tach_critical_timer.c ****         control = 0u;
 385:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* (!tach_critical_timer_UDB_CONTROL_REG_REMOVED) */
 386:Generated_Source\PSoC5/tach_critical_timer.c **** }
 390              		.loc 1 386 0
 391 0010 0C37     		adds	r7, r7, #12
 392              		.cfi_def_cfa_offset 4
 393 0012 BD46     		mov	sp, r7
 394              		.cfi_def_cfa_register 13
 395              		@ sp needed
 396 0014 5DF8047B 		ldr	r7, [sp], #4
 397              		.cfi_restore 7
 398              		.cfi_def_cfa_offset 0
 399 0018 7047     		bx	lr
 400              	.L30:
 401 001a 00BF     		.align	2
 402              	.L29:
 403 001c 72640040 		.word	1073767538
 404              		.cfi_endproc
 405              	.LFE8:
 406              		.size	tach_critical_timer_WriteControlRegister, .-tach_critical_timer_WriteControlRegister
 407              		.section	.text.tach_critical_timer_ReadPeriod,"ax",%progbits
 408              		.align	2
 409              		.global	tach_critical_timer_ReadPeriod
 410              		.thumb
 411              		.thumb_func
 412              		.type	tach_critical_timer_ReadPeriod, %function
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 15


 413              	tach_critical_timer_ReadPeriod:
 414              	.LFB9:
 387:Generated_Source\PSoC5/tach_critical_timer.c **** 
 388:Generated_Source\PSoC5/tach_critical_timer.c **** #endif /* Remove API if control register is unused */
 389:Generated_Source\PSoC5/tach_critical_timer.c **** 
 390:Generated_Source\PSoC5/tach_critical_timer.c **** 
 391:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 392:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_ReadPeriod
 393:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 394:Generated_Source\PSoC5/tach_critical_timer.c **** *
 395:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 396:Generated_Source\PSoC5/tach_critical_timer.c **** *  This function returns the current value of the Period.
 397:Generated_Source\PSoC5/tach_critical_timer.c **** *
 398:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 399:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 400:Generated_Source\PSoC5/tach_critical_timer.c **** *
 401:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 402:Generated_Source\PSoC5/tach_critical_timer.c **** *  The present value of the counter.
 403:Generated_Source\PSoC5/tach_critical_timer.c **** *
 404:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 405:Generated_Source\PSoC5/tach_critical_timer.c **** uint16 tach_critical_timer_ReadPeriod(void) 
 406:Generated_Source\PSoC5/tach_critical_timer.c **** {
 415              		.loc 1 406 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 1, uses_anonymous_args = 0
 419              		@ link register save eliminated.
 420 0000 80B4     		push	{r7}
 421              		.cfi_def_cfa_offset 4
 422              		.cfi_offset 7, -4
 423 0002 00AF     		add	r7, sp, #0
 424              		.cfi_def_cfa_register 7
 407:Generated_Source\PSoC5/tach_critical_timer.c ****    #if(tach_critical_timer_UsingFixedFunction)
 408:Generated_Source\PSoC5/tach_critical_timer.c ****        return ((uint16)CY_GET_REG16(tach_critical_timer_PERIOD_LSB_PTR));
 409:Generated_Source\PSoC5/tach_critical_timer.c ****    #else
 410:Generated_Source\PSoC5/tach_critical_timer.c ****        return (CY_GET_REG16(tach_critical_timer_PERIOD_LSB_PTR));
 425              		.loc 1 410 0
 426 0004 034B     		ldr	r3, .L33
 427 0006 1B88     		ldrh	r3, [r3]	@ movhi
 428 0008 9BB2     		uxth	r3, r3
 411:Generated_Source\PSoC5/tach_critical_timer.c ****    #endif /* (tach_critical_timer_UsingFixedFunction) */
 412:Generated_Source\PSoC5/tach_critical_timer.c **** }
 429              		.loc 1 412 0
 430 000a 1846     		mov	r0, r3
 431 000c BD46     		mov	sp, r7
 432              		.cfi_def_cfa_register 13
 433              		@ sp needed
 434 000e 5DF8047B 		ldr	r7, [sp], #4
 435              		.cfi_restore 7
 436              		.cfi_def_cfa_offset 0
 437 0012 7047     		bx	lr
 438              	.L34:
 439              		.align	2
 440              	.L33:
 441 0014 40680040 		.word	1073768512
 442              		.cfi_endproc
 443              	.LFE9:
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 16


 444              		.size	tach_critical_timer_ReadPeriod, .-tach_critical_timer_ReadPeriod
 445              		.section	.text.tach_critical_timer_WritePeriod,"ax",%progbits
 446              		.align	2
 447              		.global	tach_critical_timer_WritePeriod
 448              		.thumb
 449              		.thumb_func
 450              		.type	tach_critical_timer_WritePeriod, %function
 451              	tach_critical_timer_WritePeriod:
 452              	.LFB10:
 413:Generated_Source\PSoC5/tach_critical_timer.c **** 
 414:Generated_Source\PSoC5/tach_critical_timer.c **** 
 415:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 416:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_WritePeriod
 417:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 418:Generated_Source\PSoC5/tach_critical_timer.c **** *
 419:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 420:Generated_Source\PSoC5/tach_critical_timer.c **** *  This function is used to change the period of the counter.  The new period
 421:Generated_Source\PSoC5/tach_critical_timer.c **** *  will be loaded the next time terminal count is detected.
 422:Generated_Source\PSoC5/tach_critical_timer.c **** *
 423:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 424:Generated_Source\PSoC5/tach_critical_timer.c **** *  period: This value may be between 1 and (2^Resolution)-1.  A value of 0 will
 425:Generated_Source\PSoC5/tach_critical_timer.c **** *          result in the counter remaining at zero.
 426:Generated_Source\PSoC5/tach_critical_timer.c **** *
 427:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 428:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 429:Generated_Source\PSoC5/tach_critical_timer.c **** *
 430:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 431:Generated_Source\PSoC5/tach_critical_timer.c **** void tach_critical_timer_WritePeriod(uint16 period) 
 432:Generated_Source\PSoC5/tach_critical_timer.c **** {
 453              		.loc 1 432 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 8
 456              		@ frame_needed = 1, uses_anonymous_args = 0
 457              		@ link register save eliminated.
 458 0000 80B4     		push	{r7}
 459              		.cfi_def_cfa_offset 4
 460              		.cfi_offset 7, -4
 461 0002 83B0     		sub	sp, sp, #12
 462              		.cfi_def_cfa_offset 16
 463 0004 00AF     		add	r7, sp, #0
 464              		.cfi_def_cfa_register 7
 465 0006 0346     		mov	r3, r0
 466 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 433:Generated_Source\PSoC5/tach_critical_timer.c ****     #if(tach_critical_timer_UsingFixedFunction)
 434:Generated_Source\PSoC5/tach_critical_timer.c ****         uint16 period_temp = (uint16)period;
 435:Generated_Source\PSoC5/tach_critical_timer.c ****         CY_SET_REG16(tach_critical_timer_PERIOD_LSB_PTR, period_temp);
 436:Generated_Source\PSoC5/tach_critical_timer.c ****     #else
 437:Generated_Source\PSoC5/tach_critical_timer.c ****         CY_SET_REG16(tach_critical_timer_PERIOD_LSB_PTR, period);
 467              		.loc 1 437 0
 468 000a 044A     		ldr	r2, .L36
 469 000c FB88     		ldrh	r3, [r7, #6]	@ movhi
 470 000e 1380     		strh	r3, [r2]	@ movhi
 438:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /*Write Period value with appropriate resolution suffix depending on UDB or fixed functi
 439:Generated_Source\PSoC5/tach_critical_timer.c **** }
 471              		.loc 1 439 0
 472 0010 0C37     		adds	r7, r7, #12
 473              		.cfi_def_cfa_offset 4
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 17


 474 0012 BD46     		mov	sp, r7
 475              		.cfi_def_cfa_register 13
 476              		@ sp needed
 477 0014 5DF8047B 		ldr	r7, [sp], #4
 478              		.cfi_restore 7
 479              		.cfi_def_cfa_offset 0
 480 0018 7047     		bx	lr
 481              	.L37:
 482 001a 00BF     		.align	2
 483              	.L36:
 484 001c 40680040 		.word	1073768512
 485              		.cfi_endproc
 486              	.LFE10:
 487              		.size	tach_critical_timer_WritePeriod, .-tach_critical_timer_WritePeriod
 488              		.section	.text.tach_critical_timer_ReadCapture,"ax",%progbits
 489              		.align	2
 490              		.global	tach_critical_timer_ReadCapture
 491              		.thumb
 492              		.thumb_func
 493              		.type	tach_critical_timer_ReadCapture, %function
 494              	tach_critical_timer_ReadCapture:
 495              	.LFB11:
 440:Generated_Source\PSoC5/tach_critical_timer.c **** 
 441:Generated_Source\PSoC5/tach_critical_timer.c **** 
 442:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 443:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_ReadCapture
 444:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 445:Generated_Source\PSoC5/tach_critical_timer.c **** *
 446:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 447:Generated_Source\PSoC5/tach_critical_timer.c **** *  This function returns the last value captured.
 448:Generated_Source\PSoC5/tach_critical_timer.c **** *
 449:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 450:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 451:Generated_Source\PSoC5/tach_critical_timer.c **** *
 452:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 453:Generated_Source\PSoC5/tach_critical_timer.c **** *  Present Capture value.
 454:Generated_Source\PSoC5/tach_critical_timer.c **** *
 455:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 456:Generated_Source\PSoC5/tach_critical_timer.c **** uint16 tach_critical_timer_ReadCapture(void) 
 457:Generated_Source\PSoC5/tach_critical_timer.c **** {
 496              		.loc 1 457 0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 0
 499              		@ frame_needed = 1, uses_anonymous_args = 0
 500              		@ link register save eliminated.
 501 0000 80B4     		push	{r7}
 502              		.cfi_def_cfa_offset 4
 503              		.cfi_offset 7, -4
 504 0002 00AF     		add	r7, sp, #0
 505              		.cfi_def_cfa_register 7
 458:Generated_Source\PSoC5/tach_critical_timer.c ****    #if(tach_critical_timer_UsingFixedFunction)
 459:Generated_Source\PSoC5/tach_critical_timer.c ****        return ((uint16)CY_GET_REG16(tach_critical_timer_CAPTURE_LSB_PTR));
 460:Generated_Source\PSoC5/tach_critical_timer.c ****    #else
 461:Generated_Source\PSoC5/tach_critical_timer.c ****        return (CY_GET_REG16(tach_critical_timer_CAPTURE_LSB_PTR));
 506              		.loc 1 461 0
 507 0004 034B     		ldr	r3, .L40
 508 0006 1B88     		ldrh	r3, [r3]	@ movhi
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 18


 509 0008 9BB2     		uxth	r3, r3
 462:Generated_Source\PSoC5/tach_critical_timer.c ****    #endif /* (tach_critical_timer_UsingFixedFunction) */
 463:Generated_Source\PSoC5/tach_critical_timer.c **** }
 510              		.loc 1 463 0
 511 000a 1846     		mov	r0, r3
 512 000c BD46     		mov	sp, r7
 513              		.cfi_def_cfa_register 13
 514              		@ sp needed
 515 000e 5DF8047B 		ldr	r7, [sp], #4
 516              		.cfi_restore 7
 517              		.cfi_def_cfa_offset 0
 518 0012 7047     		bx	lr
 519              	.L41:
 520              		.align	2
 521              	.L40:
 522 0014 80680040 		.word	1073768576
 523              		.cfi_endproc
 524              	.LFE11:
 525              		.size	tach_critical_timer_ReadCapture, .-tach_critical_timer_ReadCapture
 526              		.section	.text.tach_critical_timer_WriteCounter,"ax",%progbits
 527              		.align	2
 528              		.global	tach_critical_timer_WriteCounter
 529              		.thumb
 530              		.thumb_func
 531              		.type	tach_critical_timer_WriteCounter, %function
 532              	tach_critical_timer_WriteCounter:
 533              	.LFB12:
 464:Generated_Source\PSoC5/tach_critical_timer.c **** 
 465:Generated_Source\PSoC5/tach_critical_timer.c **** 
 466:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 467:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_WriteCounter
 468:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 469:Generated_Source\PSoC5/tach_critical_timer.c **** *
 470:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 471:Generated_Source\PSoC5/tach_critical_timer.c **** *  This funtion is used to set the counter to a specific value
 472:Generated_Source\PSoC5/tach_critical_timer.c **** *
 473:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 474:Generated_Source\PSoC5/tach_critical_timer.c **** *  counter:  New counter value.
 475:Generated_Source\PSoC5/tach_critical_timer.c **** *
 476:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 477:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 478:Generated_Source\PSoC5/tach_critical_timer.c **** *
 479:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 480:Generated_Source\PSoC5/tach_critical_timer.c **** void tach_critical_timer_WriteCounter(uint16 counter) 
 481:Generated_Source\PSoC5/tach_critical_timer.c **** {
 534              		.loc 1 481 0
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 8
 537              		@ frame_needed = 1, uses_anonymous_args = 0
 538              		@ link register save eliminated.
 539 0000 80B4     		push	{r7}
 540              		.cfi_def_cfa_offset 4
 541              		.cfi_offset 7, -4
 542 0002 83B0     		sub	sp, sp, #12
 543              		.cfi_def_cfa_offset 16
 544 0004 00AF     		add	r7, sp, #0
 545              		.cfi_def_cfa_register 7
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 19


 546 0006 0346     		mov	r3, r0
 547 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 482:Generated_Source\PSoC5/tach_critical_timer.c ****    #if(tach_critical_timer_UsingFixedFunction)
 483:Generated_Source\PSoC5/tach_critical_timer.c ****         /* This functionality is removed until a FixedFunction HW update to
 484:Generated_Source\PSoC5/tach_critical_timer.c ****          * allow this register to be written
 485:Generated_Source\PSoC5/tach_critical_timer.c ****          */
 486:Generated_Source\PSoC5/tach_critical_timer.c ****         CY_SET_REG16(tach_critical_timer_COUNTER_LSB_PTR, (uint16)counter);
 487:Generated_Source\PSoC5/tach_critical_timer.c ****         
 488:Generated_Source\PSoC5/tach_critical_timer.c ****     #else
 489:Generated_Source\PSoC5/tach_critical_timer.c ****         CY_SET_REG16(tach_critical_timer_COUNTER_LSB_PTR, counter);
 548              		.loc 1 489 0
 549 000a 044A     		ldr	r2, .L43
 550 000c FB88     		ldrh	r3, [r7, #6]	@ movhi
 551 000e 1380     		strh	r3, [r2]	@ movhi
 490:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* Set Write Counter only for the UDB implementation (Write Counter not available in fix
 491:Generated_Source\PSoC5/tach_critical_timer.c **** }
 552              		.loc 1 491 0
 553 0010 0C37     		adds	r7, r7, #12
 554              		.cfi_def_cfa_offset 4
 555 0012 BD46     		mov	sp, r7
 556              		.cfi_def_cfa_register 13
 557              		@ sp needed
 558 0014 5DF8047B 		ldr	r7, [sp], #4
 559              		.cfi_restore 7
 560              		.cfi_def_cfa_offset 0
 561 0018 7047     		bx	lr
 562              	.L44:
 563 001a 00BF     		.align	2
 564              	.L43:
 565 001c 00680040 		.word	1073768448
 566              		.cfi_endproc
 567              	.LFE12:
 568              		.size	tach_critical_timer_WriteCounter, .-tach_critical_timer_WriteCounter
 569              		.section	.text.tach_critical_timer_ReadCounter,"ax",%progbits
 570              		.align	2
 571              		.global	tach_critical_timer_ReadCounter
 572              		.thumb
 573              		.thumb_func
 574              		.type	tach_critical_timer_ReadCounter, %function
 575              	tach_critical_timer_ReadCounter:
 576              	.LFB13:
 492:Generated_Source\PSoC5/tach_critical_timer.c **** 
 493:Generated_Source\PSoC5/tach_critical_timer.c **** 
 494:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 495:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_ReadCounter
 496:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 497:Generated_Source\PSoC5/tach_critical_timer.c **** *
 498:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 499:Generated_Source\PSoC5/tach_critical_timer.c **** *  This function returns the current counter value.
 500:Generated_Source\PSoC5/tach_critical_timer.c **** *
 501:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 502:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 503:Generated_Source\PSoC5/tach_critical_timer.c **** *
 504:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 505:Generated_Source\PSoC5/tach_critical_timer.c **** *  Present compare value.
 506:Generated_Source\PSoC5/tach_critical_timer.c **** *
 507:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 20


 508:Generated_Source\PSoC5/tach_critical_timer.c **** uint16 tach_critical_timer_ReadCounter(void) 
 509:Generated_Source\PSoC5/tach_critical_timer.c **** {
 577              		.loc 1 509 0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 0
 580              		@ frame_needed = 1, uses_anonymous_args = 0
 581              		@ link register save eliminated.
 582 0000 80B4     		push	{r7}
 583              		.cfi_def_cfa_offset 4
 584              		.cfi_offset 7, -4
 585 0002 00AF     		add	r7, sp, #0
 586              		.cfi_def_cfa_register 7
 510:Generated_Source\PSoC5/tach_critical_timer.c ****     /* Force capture by reading Accumulator */
 511:Generated_Source\PSoC5/tach_critical_timer.c ****     /* Must first do a software capture to be able to read the counter */
 512:Generated_Source\PSoC5/tach_critical_timer.c ****     /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 513:Generated_Source\PSoC5/tach_critical_timer.c ****     #if(tach_critical_timer_UsingFixedFunction)
 514:Generated_Source\PSoC5/tach_critical_timer.c ****         (void)CY_GET_REG16(tach_critical_timer_COUNTER_LSB_PTR);
 515:Generated_Source\PSoC5/tach_critical_timer.c ****     #else
 516:Generated_Source\PSoC5/tach_critical_timer.c ****         (void)CY_GET_REG8(tach_critical_timer_COUNTER_LSB_PTR_8BIT);
 587              		.loc 1 516 0
 588 0004 044B     		ldr	r3, .L47
 589 0006 1B78     		ldrb	r3, [r3]
 517:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif/* (tach_critical_timer_UsingFixedFunction) */
 518:Generated_Source\PSoC5/tach_critical_timer.c **** 
 519:Generated_Source\PSoC5/tach_critical_timer.c ****     /* Read the data from the FIFO (or capture register for Fixed Function)*/
 520:Generated_Source\PSoC5/tach_critical_timer.c ****     #if(tach_critical_timer_UsingFixedFunction)
 521:Generated_Source\PSoC5/tach_critical_timer.c ****         return ((uint16)CY_GET_REG16(tach_critical_timer_CAPTURE_LSB_PTR));
 522:Generated_Source\PSoC5/tach_critical_timer.c ****     #else
 523:Generated_Source\PSoC5/tach_critical_timer.c ****         return (CY_GET_REG16(tach_critical_timer_CAPTURE_LSB_PTR));
 590              		.loc 1 523 0
 591 0008 044B     		ldr	r3, .L47+4
 592 000a 1B88     		ldrh	r3, [r3]	@ movhi
 593 000c 9BB2     		uxth	r3, r3
 524:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* (tach_critical_timer_UsingFixedFunction) */
 525:Generated_Source\PSoC5/tach_critical_timer.c **** }
 594              		.loc 1 525 0
 595 000e 1846     		mov	r0, r3
 596 0010 BD46     		mov	sp, r7
 597              		.cfi_def_cfa_register 13
 598              		@ sp needed
 599 0012 5DF8047B 		ldr	r7, [sp], #4
 600              		.cfi_restore 7
 601              		.cfi_def_cfa_offset 0
 602 0016 7047     		bx	lr
 603              	.L48:
 604              		.align	2
 605              	.L47:
 606 0018 00640040 		.word	1073767424
 607 001c 80680040 		.word	1073768576
 608              		.cfi_endproc
 609              	.LFE13:
 610              		.size	tach_critical_timer_ReadCounter, .-tach_critical_timer_ReadCounter
 611              		.section	.text.tach_critical_timer_ClearFIFO,"ax",%progbits
 612              		.align	2
 613              		.global	tach_critical_timer_ClearFIFO
 614              		.thumb
 615              		.thumb_func
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 21


 616              		.type	tach_critical_timer_ClearFIFO, %function
 617              	tach_critical_timer_ClearFIFO:
 618              	.LFB14:
 526:Generated_Source\PSoC5/tach_critical_timer.c **** 
 527:Generated_Source\PSoC5/tach_critical_timer.c **** 
 528:Generated_Source\PSoC5/tach_critical_timer.c **** #if(!tach_critical_timer_UsingFixedFunction) /* UDB Specific Functions */
 529:Generated_Source\PSoC5/tach_critical_timer.c **** 
 530:Generated_Source\PSoC5/tach_critical_timer.c ****     
 531:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 532:Generated_Source\PSoC5/tach_critical_timer.c ****  * The functions below this point are only available using the UDB
 533:Generated_Source\PSoC5/tach_critical_timer.c ****  * implementation.  If a feature is selected, then the API is enabled.
 534:Generated_Source\PSoC5/tach_critical_timer.c ****  ******************************************************************************/
 535:Generated_Source\PSoC5/tach_critical_timer.c **** 
 536:Generated_Source\PSoC5/tach_critical_timer.c **** 
 537:Generated_Source\PSoC5/tach_critical_timer.c **** #if (tach_critical_timer_SoftwareCaptureMode)
 538:Generated_Source\PSoC5/tach_critical_timer.c **** 
 539:Generated_Source\PSoC5/tach_critical_timer.c **** 
 540:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 541:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_SetCaptureMode
 542:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 543:Generated_Source\PSoC5/tach_critical_timer.c **** *
 544:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 545:Generated_Source\PSoC5/tach_critical_timer.c **** *  This function sets the capture mode to either rising or falling edge.
 546:Generated_Source\PSoC5/tach_critical_timer.c **** *
 547:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 548:Generated_Source\PSoC5/tach_critical_timer.c **** *  captureMode: This parameter sets the capture mode of the UDB capture feature
 549:Generated_Source\PSoC5/tach_critical_timer.c **** *  The parameter values are defined using the
 550:Generated_Source\PSoC5/tach_critical_timer.c **** *  #define tach_critical_timer__B_TIMER__CM_NONE 0
 551:Generated_Source\PSoC5/tach_critical_timer.c **** #define tach_critical_timer__B_TIMER__CM_RISINGEDGE 1
 552:Generated_Source\PSoC5/tach_critical_timer.c **** #define tach_critical_timer__B_TIMER__CM_FALLINGEDGE 2
 553:Generated_Source\PSoC5/tach_critical_timer.c **** #define tach_critical_timer__B_TIMER__CM_EITHEREDGE 3
 554:Generated_Source\PSoC5/tach_critical_timer.c **** #define tach_critical_timer__B_TIMER__CM_SOFTWARE 4
 555:Generated_Source\PSoC5/tach_critical_timer.c ****  identifiers
 556:Generated_Source\PSoC5/tach_critical_timer.c **** *  The following are the possible values of the parameter
 557:Generated_Source\PSoC5/tach_critical_timer.c **** *  tach_critical_timer__B_TIMER__CM_NONE        - Set Capture mode to None
 558:Generated_Source\PSoC5/tach_critical_timer.c **** *  tach_critical_timer__B_TIMER__CM_RISINGEDGE  - Rising edge of Capture input
 559:Generated_Source\PSoC5/tach_critical_timer.c **** *  tach_critical_timer__B_TIMER__CM_FALLINGEDGE - Falling edge of Capture input
 560:Generated_Source\PSoC5/tach_critical_timer.c **** *  tach_critical_timer__B_TIMER__CM_EITHEREDGE  - Either edge of Capture input
 561:Generated_Source\PSoC5/tach_critical_timer.c **** *
 562:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 563:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 564:Generated_Source\PSoC5/tach_critical_timer.c **** *
 565:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 566:Generated_Source\PSoC5/tach_critical_timer.c **** void tach_critical_timer_SetCaptureMode(uint8 captureMode) 
 567:Generated_Source\PSoC5/tach_critical_timer.c **** {
 568:Generated_Source\PSoC5/tach_critical_timer.c ****     /* This must only set to two bits of the control register associated */
 569:Generated_Source\PSoC5/tach_critical_timer.c ****     captureMode = ((uint8)((uint8)captureMode << tach_critical_timer_CTRL_CAP_MODE_SHIFT));
 570:Generated_Source\PSoC5/tach_critical_timer.c ****     captureMode &= (tach_critical_timer_CTRL_CAP_MODE_MASK);
 571:Generated_Source\PSoC5/tach_critical_timer.c **** 
 572:Generated_Source\PSoC5/tach_critical_timer.c ****     #if (!tach_critical_timer_UDB_CONTROL_REG_REMOVED)
 573:Generated_Source\PSoC5/tach_critical_timer.c ****         /* Clear the Current Setting */
 574:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_CONTROL &= ((uint8)(~tach_critical_timer_CTRL_CAP_MODE_MASK));
 575:Generated_Source\PSoC5/tach_critical_timer.c **** 
 576:Generated_Source\PSoC5/tach_critical_timer.c ****         /* Write The New Setting */
 577:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_CONTROL |= captureMode;
 578:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* (!tach_critical_timer_UDB_CONTROL_REG_REMOVED) */
 579:Generated_Source\PSoC5/tach_critical_timer.c **** }
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 22


 580:Generated_Source\PSoC5/tach_critical_timer.c **** #endif /* Remove API if Capture Mode is not Software Controlled */
 581:Generated_Source\PSoC5/tach_critical_timer.c **** 
 582:Generated_Source\PSoC5/tach_critical_timer.c **** 
 583:Generated_Source\PSoC5/tach_critical_timer.c **** #if (tach_critical_timer_SoftwareTriggerMode)
 584:Generated_Source\PSoC5/tach_critical_timer.c **** 
 585:Generated_Source\PSoC5/tach_critical_timer.c **** 
 586:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 587:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_SetTriggerMode
 588:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 589:Generated_Source\PSoC5/tach_critical_timer.c **** *
 590:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 591:Generated_Source\PSoC5/tach_critical_timer.c **** *  This function sets the trigger input mode
 592:Generated_Source\PSoC5/tach_critical_timer.c **** *
 593:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 594:Generated_Source\PSoC5/tach_critical_timer.c **** *  triggerMode: Pass one of the pre-defined Trigger Modes (except Software)
 595:Generated_Source\PSoC5/tach_critical_timer.c ****     #define tach_critical_timer__B_TIMER__TM_NONE 0x00u
 596:Generated_Source\PSoC5/tach_critical_timer.c ****     #define tach_critical_timer__B_TIMER__TM_RISINGEDGE 0x04u
 597:Generated_Source\PSoC5/tach_critical_timer.c ****     #define tach_critical_timer__B_TIMER__TM_FALLINGEDGE 0x08u
 598:Generated_Source\PSoC5/tach_critical_timer.c ****     #define tach_critical_timer__B_TIMER__TM_EITHEREDGE 0x0Cu
 599:Generated_Source\PSoC5/tach_critical_timer.c ****     #define tach_critical_timer__B_TIMER__TM_SOFTWARE 0x10u
 600:Generated_Source\PSoC5/tach_critical_timer.c **** *
 601:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 602:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 603:Generated_Source\PSoC5/tach_critical_timer.c **** *
 604:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 605:Generated_Source\PSoC5/tach_critical_timer.c **** void tach_critical_timer_SetTriggerMode(uint8 triggerMode) 
 606:Generated_Source\PSoC5/tach_critical_timer.c **** {
 607:Generated_Source\PSoC5/tach_critical_timer.c ****     /* This must only set to two bits of the control register associated */
 608:Generated_Source\PSoC5/tach_critical_timer.c ****     triggerMode &= tach_critical_timer_CTRL_TRIG_MODE_MASK;
 609:Generated_Source\PSoC5/tach_critical_timer.c **** 
 610:Generated_Source\PSoC5/tach_critical_timer.c ****     #if (!tach_critical_timer_UDB_CONTROL_REG_REMOVED)   /* Remove assignment if control register i
 611:Generated_Source\PSoC5/tach_critical_timer.c ****     
 612:Generated_Source\PSoC5/tach_critical_timer.c ****         /* Clear the Current Setting */
 613:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_CONTROL &= ((uint8)(~tach_critical_timer_CTRL_TRIG_MODE_MASK));
 614:Generated_Source\PSoC5/tach_critical_timer.c **** 
 615:Generated_Source\PSoC5/tach_critical_timer.c ****         /* Write The New Setting */
 616:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_CONTROL |= (triggerMode | tach_critical_timer__B_TIMER__TM_SOFTWARE);
 617:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* Remove code section if control register is not used */
 618:Generated_Source\PSoC5/tach_critical_timer.c **** }
 619:Generated_Source\PSoC5/tach_critical_timer.c **** #endif /* Remove API if Trigger Mode is not Software Controlled */
 620:Generated_Source\PSoC5/tach_critical_timer.c **** 
 621:Generated_Source\PSoC5/tach_critical_timer.c **** #if (tach_critical_timer_EnableTriggerMode)
 622:Generated_Source\PSoC5/tach_critical_timer.c **** 
 623:Generated_Source\PSoC5/tach_critical_timer.c **** 
 624:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 625:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_EnableTrigger
 626:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 627:Generated_Source\PSoC5/tach_critical_timer.c **** *
 628:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 629:Generated_Source\PSoC5/tach_critical_timer.c **** *  Sets the control bit enabling Hardware Trigger mode
 630:Generated_Source\PSoC5/tach_critical_timer.c **** *
 631:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 632:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 633:Generated_Source\PSoC5/tach_critical_timer.c **** *
 634:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 635:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 636:Generated_Source\PSoC5/tach_critical_timer.c **** *
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 23


 637:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 638:Generated_Source\PSoC5/tach_critical_timer.c **** void tach_critical_timer_EnableTrigger(void) 
 639:Generated_Source\PSoC5/tach_critical_timer.c **** {
 640:Generated_Source\PSoC5/tach_critical_timer.c ****     #if (!tach_critical_timer_UDB_CONTROL_REG_REMOVED)   /* Remove assignment if control register i
 641:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_CONTROL |= tach_critical_timer_CTRL_TRIG_EN;
 642:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* Remove code section if control register is not used */
 643:Generated_Source\PSoC5/tach_critical_timer.c **** }
 644:Generated_Source\PSoC5/tach_critical_timer.c **** 
 645:Generated_Source\PSoC5/tach_critical_timer.c **** 
 646:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 647:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_DisableTrigger
 648:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 649:Generated_Source\PSoC5/tach_critical_timer.c **** *
 650:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 651:Generated_Source\PSoC5/tach_critical_timer.c **** *  Clears the control bit enabling Hardware Trigger mode
 652:Generated_Source\PSoC5/tach_critical_timer.c **** *
 653:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 654:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 655:Generated_Source\PSoC5/tach_critical_timer.c **** *
 656:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 657:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 658:Generated_Source\PSoC5/tach_critical_timer.c **** *
 659:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 660:Generated_Source\PSoC5/tach_critical_timer.c **** void tach_critical_timer_DisableTrigger(void) 
 661:Generated_Source\PSoC5/tach_critical_timer.c **** {
 662:Generated_Source\PSoC5/tach_critical_timer.c ****     #if (!tach_critical_timer_UDB_CONTROL_REG_REMOVED )   /* Remove assignment if control register 
 663:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_CONTROL &= ((uint8)(~tach_critical_timer_CTRL_TRIG_EN));
 664:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* Remove code section if control register is not used */
 665:Generated_Source\PSoC5/tach_critical_timer.c **** }
 666:Generated_Source\PSoC5/tach_critical_timer.c **** #endif /* Remove API is Trigger Mode is set to None */
 667:Generated_Source\PSoC5/tach_critical_timer.c **** 
 668:Generated_Source\PSoC5/tach_critical_timer.c **** #if(tach_critical_timer_InterruptOnCaptureCount)
 669:Generated_Source\PSoC5/tach_critical_timer.c **** 
 670:Generated_Source\PSoC5/tach_critical_timer.c **** 
 671:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 672:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_SetInterruptCount
 673:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 674:Generated_Source\PSoC5/tach_critical_timer.c **** *
 675:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 676:Generated_Source\PSoC5/tach_critical_timer.c **** *  This function sets the capture count before an interrupt is triggered.
 677:Generated_Source\PSoC5/tach_critical_timer.c **** *
 678:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 679:Generated_Source\PSoC5/tach_critical_timer.c **** *  interruptCount:  A value between 0 and 3 is valid.  If the value is 0, then
 680:Generated_Source\PSoC5/tach_critical_timer.c **** *                   an interrupt will occur each time a capture occurs.
 681:Generated_Source\PSoC5/tach_critical_timer.c **** *                   A value of 1 to 3 will cause the interrupt
 682:Generated_Source\PSoC5/tach_critical_timer.c **** *                   to delay by the same number of captures.
 683:Generated_Source\PSoC5/tach_critical_timer.c **** *
 684:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 685:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 686:Generated_Source\PSoC5/tach_critical_timer.c **** *
 687:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 688:Generated_Source\PSoC5/tach_critical_timer.c **** void tach_critical_timer_SetInterruptCount(uint8 interruptCount) 
 689:Generated_Source\PSoC5/tach_critical_timer.c **** {
 690:Generated_Source\PSoC5/tach_critical_timer.c ****     /* This must only set to two bits of the control register associated */
 691:Generated_Source\PSoC5/tach_critical_timer.c ****     interruptCount &= tach_critical_timer_CTRL_INTCNT_MASK;
 692:Generated_Source\PSoC5/tach_critical_timer.c **** 
 693:Generated_Source\PSoC5/tach_critical_timer.c ****     #if (!tach_critical_timer_UDB_CONTROL_REG_REMOVED)
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 24


 694:Generated_Source\PSoC5/tach_critical_timer.c ****         /* Clear the Current Setting */
 695:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_CONTROL &= ((uint8)(~tach_critical_timer_CTRL_INTCNT_MASK));
 696:Generated_Source\PSoC5/tach_critical_timer.c ****         /* Write The New Setting */
 697:Generated_Source\PSoC5/tach_critical_timer.c ****         tach_critical_timer_CONTROL |= interruptCount;
 698:Generated_Source\PSoC5/tach_critical_timer.c ****     #endif /* (!tach_critical_timer_UDB_CONTROL_REG_REMOVED) */
 699:Generated_Source\PSoC5/tach_critical_timer.c **** }
 700:Generated_Source\PSoC5/tach_critical_timer.c **** #endif /* tach_critical_timer_InterruptOnCaptureCount */
 701:Generated_Source\PSoC5/tach_critical_timer.c **** 
 702:Generated_Source\PSoC5/tach_critical_timer.c **** 
 703:Generated_Source\PSoC5/tach_critical_timer.c **** #if (tach_critical_timer_UsingHWCaptureCounter)
 704:Generated_Source\PSoC5/tach_critical_timer.c **** 
 705:Generated_Source\PSoC5/tach_critical_timer.c **** 
 706:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 707:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_SetCaptureCount
 708:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 709:Generated_Source\PSoC5/tach_critical_timer.c **** *
 710:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 711:Generated_Source\PSoC5/tach_critical_timer.c **** *  This function sets the capture count
 712:Generated_Source\PSoC5/tach_critical_timer.c **** *
 713:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 714:Generated_Source\PSoC5/tach_critical_timer.c **** *  captureCount: A value between 2 and 127 inclusive is valid.  A value of 1
 715:Generated_Source\PSoC5/tach_critical_timer.c **** *                to 127 will cause the interrupt to delay by the same number of
 716:Generated_Source\PSoC5/tach_critical_timer.c **** *                captures.
 717:Generated_Source\PSoC5/tach_critical_timer.c **** *
 718:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 719:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 720:Generated_Source\PSoC5/tach_critical_timer.c **** *
 721:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 722:Generated_Source\PSoC5/tach_critical_timer.c **** void tach_critical_timer_SetCaptureCount(uint8 captureCount) 
 723:Generated_Source\PSoC5/tach_critical_timer.c **** {
 724:Generated_Source\PSoC5/tach_critical_timer.c ****     tach_critical_timer_CAP_COUNT = captureCount;
 725:Generated_Source\PSoC5/tach_critical_timer.c **** }
 726:Generated_Source\PSoC5/tach_critical_timer.c **** 
 727:Generated_Source\PSoC5/tach_critical_timer.c **** 
 728:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 729:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_ReadCaptureCount
 730:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 731:Generated_Source\PSoC5/tach_critical_timer.c **** *
 732:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 733:Generated_Source\PSoC5/tach_critical_timer.c **** *  This function reads the capture count setting
 734:Generated_Source\PSoC5/tach_critical_timer.c **** *
 735:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 736:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 737:Generated_Source\PSoC5/tach_critical_timer.c **** *
 738:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 739:Generated_Source\PSoC5/tach_critical_timer.c **** *  Returns the Capture Count Setting
 740:Generated_Source\PSoC5/tach_critical_timer.c **** *
 741:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 742:Generated_Source\PSoC5/tach_critical_timer.c **** uint8 tach_critical_timer_ReadCaptureCount(void) 
 743:Generated_Source\PSoC5/tach_critical_timer.c **** {
 744:Generated_Source\PSoC5/tach_critical_timer.c ****     return ((uint8)tach_critical_timer_CAP_COUNT);
 745:Generated_Source\PSoC5/tach_critical_timer.c **** }
 746:Generated_Source\PSoC5/tach_critical_timer.c **** #endif /* tach_critical_timer_UsingHWCaptureCounter */
 747:Generated_Source\PSoC5/tach_critical_timer.c **** 
 748:Generated_Source\PSoC5/tach_critical_timer.c **** 
 749:Generated_Source\PSoC5/tach_critical_timer.c **** /*******************************************************************************
 750:Generated_Source\PSoC5/tach_critical_timer.c **** * Function Name: tach_critical_timer_ClearFIFO
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 25


 751:Generated_Source\PSoC5/tach_critical_timer.c **** ********************************************************************************
 752:Generated_Source\PSoC5/tach_critical_timer.c **** *
 753:Generated_Source\PSoC5/tach_critical_timer.c **** * Summary:
 754:Generated_Source\PSoC5/tach_critical_timer.c **** *  This function clears all capture data from the capture FIFO
 755:Generated_Source\PSoC5/tach_critical_timer.c **** *
 756:Generated_Source\PSoC5/tach_critical_timer.c **** * Parameters:
 757:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 758:Generated_Source\PSoC5/tach_critical_timer.c **** *
 759:Generated_Source\PSoC5/tach_critical_timer.c **** * Return:
 760:Generated_Source\PSoC5/tach_critical_timer.c **** *  void
 761:Generated_Source\PSoC5/tach_critical_timer.c **** *
 762:Generated_Source\PSoC5/tach_critical_timer.c **** *******************************************************************************/
 763:Generated_Source\PSoC5/tach_critical_timer.c **** void tach_critical_timer_ClearFIFO(void) 
 764:Generated_Source\PSoC5/tach_critical_timer.c **** {
 619              		.loc 1 764 0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 1, uses_anonymous_args = 0
 623 0000 80B5     		push	{r7, lr}
 624              		.cfi_def_cfa_offset 8
 625              		.cfi_offset 7, -8
 626              		.cfi_offset 14, -4
 627 0002 00AF     		add	r7, sp, #0
 628              		.cfi_def_cfa_register 7
 765:Generated_Source\PSoC5/tach_critical_timer.c ****     while(0u != (tach_critical_timer_ReadStatusRegister() & tach_critical_timer_STATUS_FIFONEMP))
 629              		.loc 1 765 0
 630 0004 01E0     		b	.L50
 631              	.L51:
 766:Generated_Source\PSoC5/tach_critical_timer.c ****     {
 767:Generated_Source\PSoC5/tach_critical_timer.c ****         (void)tach_critical_timer_ReadCapture();
 632              		.loc 1 767 0
 633 0006 FFF7FEFF 		bl	tach_critical_timer_ReadCapture
 634              	.L50:
 765:Generated_Source\PSoC5/tach_critical_timer.c ****     while(0u != (tach_critical_timer_ReadStatusRegister() & tach_critical_timer_STATUS_FIFONEMP))
 635              		.loc 1 765 0
 636 000a FFF7FEFF 		bl	tach_critical_timer_ReadStatusRegister
 637 000e 0346     		mov	r3, r0
 638 0010 03F00803 		and	r3, r3, #8
 639 0014 002B     		cmp	r3, #0
 640 0016 F6D1     		bne	.L51
 768:Generated_Source\PSoC5/tach_critical_timer.c ****     }
 769:Generated_Source\PSoC5/tach_critical_timer.c **** }
 641              		.loc 1 769 0
 642 0018 80BD     		pop	{r7, pc}
 643              		.cfi_endproc
 644              	.LFE14:
 645              		.size	tach_critical_timer_ClearFIFO, .-tach_critical_timer_ClearFIFO
 646 001a 00BF     		.text
 647              	.Letext0:
 648              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 649              		.section	.debug_info,"",%progbits
 650              	.Ldebug_info0:
 651 0000 50020000 		.4byte	0x250
 652 0004 0400     		.2byte	0x4
 653 0006 00000000 		.4byte	.Ldebug_abbrev0
 654 000a 04       		.byte	0x4
 655 000b 01       		.uleb128 0x1
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 26


 656 000c D6010000 		.4byte	.LASF36
 657 0010 01       		.byte	0x1
 658 0011 E7000000 		.4byte	.LASF37
 659 0015 3E030000 		.4byte	.LASF38
 660 0019 00000000 		.4byte	.Ldebug_ranges0+0
 661 001d 00000000 		.4byte	0
 662 0021 00000000 		.4byte	.Ldebug_line0
 663 0025 02       		.uleb128 0x2
 664 0026 01       		.byte	0x1
 665 0027 06       		.byte	0x6
 666 0028 ED030000 		.4byte	.LASF0
 667 002c 02       		.uleb128 0x2
 668 002d 01       		.byte	0x1
 669 002e 08       		.byte	0x8
 670 002f 22010000 		.4byte	.LASF1
 671 0033 02       		.uleb128 0x2
 672 0034 02       		.byte	0x2
 673 0035 05       		.byte	0x5
 674 0036 96030000 		.4byte	.LASF2
 675 003a 02       		.uleb128 0x2
 676 003b 02       		.byte	0x2
 677 003c 07       		.byte	0x7
 678 003d 7A000000 		.4byte	.LASF3
 679 0041 02       		.uleb128 0x2
 680 0042 04       		.byte	0x4
 681 0043 05       		.byte	0x5
 682 0044 BF030000 		.4byte	.LASF4
 683 0048 02       		.uleb128 0x2
 684 0049 04       		.byte	0x4
 685 004a 07       		.byte	0x7
 686 004b 51010000 		.4byte	.LASF5
 687 004f 02       		.uleb128 0x2
 688 0050 08       		.byte	0x8
 689 0051 05       		.byte	0x5
 690 0052 FB020000 		.4byte	.LASF6
 691 0056 02       		.uleb128 0x2
 692 0057 08       		.byte	0x8
 693 0058 07       		.byte	0x7
 694 0059 9E020000 		.4byte	.LASF7
 695 005d 03       		.uleb128 0x3
 696 005e 04       		.byte	0x4
 697 005f 05       		.byte	0x5
 698 0060 696E7400 		.ascii	"int\000"
 699 0064 02       		.uleb128 0x2
 700 0065 04       		.byte	0x4
 701 0066 07       		.byte	0x7
 702 0067 91020000 		.4byte	.LASF8
 703 006b 04       		.uleb128 0x4
 704 006c A0030000 		.4byte	.LASF9
 705 0070 02       		.byte	0x2
 706 0071 3801     		.2byte	0x138
 707 0073 2C000000 		.4byte	0x2c
 708 0077 04       		.uleb128 0x4
 709 0078 6B020000 		.4byte	.LASF10
 710 007c 02       		.byte	0x2
 711 007d 3901     		.2byte	0x139
 712 007f 3A000000 		.4byte	0x3a
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 27


 713 0083 02       		.uleb128 0x2
 714 0084 04       		.byte	0x4
 715 0085 04       		.byte	0x4
 716 0086 14010000 		.4byte	.LASF11
 717 008a 02       		.uleb128 0x2
 718 008b 08       		.byte	0x8
 719 008c 04       		.byte	0x4
 720 008d 64020000 		.4byte	.LASF12
 721 0091 02       		.uleb128 0x2
 722 0092 01       		.byte	0x1
 723 0093 08       		.byte	0x8
 724 0094 C8030000 		.4byte	.LASF13
 725 0098 04       		.uleb128 0x4
 726 0099 4C010000 		.4byte	.LASF14
 727 009d 02       		.byte	0x2
 728 009e E201     		.2byte	0x1e2
 729 00a0 A4000000 		.4byte	0xa4
 730 00a4 05       		.uleb128 0x5
 731 00a5 6B000000 		.4byte	0x6b
 732 00a9 04       		.uleb128 0x4
 733 00aa 00000000 		.4byte	.LASF15
 734 00ae 02       		.byte	0x2
 735 00af E301     		.2byte	0x1e3
 736 00b1 B5000000 		.4byte	0xb5
 737 00b5 05       		.uleb128 0x5
 738 00b6 77000000 		.4byte	0x77
 739 00ba 02       		.uleb128 0x2
 740 00bb 04       		.byte	0x4
 741 00bc 07       		.byte	0x7
 742 00bd F2020000 		.4byte	.LASF16
 743 00c1 06       		.uleb128 0x6
 744 00c2 A6030000 		.4byte	.LASF20
 745 00c6 01       		.byte	0x1
 746 00c7 2B       		.byte	0x2b
 747 00c8 00000000 		.4byte	.LFB0
 748 00cc 4C000000 		.4byte	.LFE0-.LFB0
 749 00d0 01       		.uleb128 0x1
 750 00d1 9C       		.byte	0x9c
 751 00d2 E5000000 		.4byte	0xe5
 752 00d6 07       		.uleb128 0x7
 753 00d7 CF020000 		.4byte	.LASF39
 754 00db 01       		.byte	0x1
 755 00dc 2F       		.byte	0x2f
 756 00dd 6B000000 		.4byte	0x6b
 757 00e1 02       		.uleb128 0x2
 758 00e2 91       		.byte	0x91
 759 00e3 77       		.sleb128 -9
 760 00e4 00       		.byte	0
 761 00e5 08       		.uleb128 0x8
 762 00e6 7B030000 		.4byte	.LASF17
 763 00ea 01       		.byte	0x1
 764 00eb B4       		.byte	0xb4
 765 00ec 00000000 		.4byte	.LFB1
 766 00f0 20000000 		.4byte	.LFE1-.LFB1
 767 00f4 01       		.uleb128 0x1
 768 00f5 9C       		.byte	0x9c
 769 00f6 09       		.uleb128 0x9
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 28


 770 00f7 B5020000 		.4byte	.LASF18
 771 00fb 01       		.byte	0x1
 772 00fc D7       		.byte	0xd7
 773 00fd 00000000 		.4byte	.LFB2
 774 0101 20000000 		.4byte	.LFE2-.LFB2
 775 0105 01       		.uleb128 0x1
 776 0106 9C       		.byte	0x9c
 777 0107 08       		.uleb128 0x8
 778 0108 CE000000 		.4byte	.LASF19
 779 010c 01       		.byte	0x1
 780 010d F7       		.byte	0xf7
 781 010e 00000000 		.4byte	.LFB3
 782 0112 20000000 		.4byte	.LFE3-.LFB3
 783 0116 01       		.uleb128 0x1
 784 0117 9C       		.byte	0x9c
 785 0118 0A       		.uleb128 0xa
 786 0119 B1010000 		.4byte	.LASF21
 787 011d 01       		.byte	0x1
 788 011e 1701     		.2byte	0x117
 789 0120 00000000 		.4byte	.LFB4
 790 0124 20000000 		.4byte	.LFE4-.LFB4
 791 0128 01       		.uleb128 0x1
 792 0129 9C       		.byte	0x9c
 793 012a 3E010000 		.4byte	0x13e
 794 012e 0B       		.uleb128 0xb
 795 012f 30030000 		.4byte	.LASF26
 796 0133 01       		.byte	0x1
 797 0134 1701     		.2byte	0x117
 798 0136 6B000000 		.4byte	0x6b
 799 013a 02       		.uleb128 0x2
 800 013b 91       		.byte	0x91
 801 013c 77       		.sleb128 -9
 802 013d 00       		.byte	0
 803 013e 0C       		.uleb128 0xc
 804 013f 26000000 		.4byte	.LASF22
 805 0143 01       		.byte	0x1
 806 0144 2E01     		.2byte	0x12e
 807 0146 00000000 		.4byte	.LFB5
 808 014a 14000000 		.4byte	.LFE5-.LFB5
 809 014e 01       		.uleb128 0x1
 810 014f 9C       		.byte	0x9c
 811 0150 0D       		.uleb128 0xd
 812 0151 09030000 		.4byte	.LASF23
 813 0155 01       		.byte	0x1
 814 0156 4D01     		.2byte	0x14d
 815 0158 6B000000 		.4byte	0x6b
 816 015c 00000000 		.4byte	.LFB6
 817 0160 18000000 		.4byte	.LFE6-.LFB6
 818 0164 01       		.uleb128 0x1
 819 0165 9C       		.byte	0x9c
 820 0166 0D       		.uleb128 0xd
 821 0167 63010000 		.4byte	.LASF24
 822 016b 01       		.byte	0x1
 823 016c 6401     		.2byte	0x164
 824 016e 6B000000 		.4byte	0x6b
 825 0172 00000000 		.4byte	.LFB7
 826 0176 18000000 		.4byte	.LFE7-.LFB7
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 29


 827 017a 01       		.uleb128 0x1
 828 017b 9C       		.byte	0x9c
 829 017c 0A       		.uleb128 0xa
 830 017d 51000000 		.4byte	.LASF25
 831 0181 01       		.byte	0x1
 832 0182 7B01     		.2byte	0x17b
 833 0184 00000000 		.4byte	.LFB8
 834 0188 20000000 		.4byte	.LFE8-.LFB8
 835 018c 01       		.uleb128 0x1
 836 018d 9C       		.byte	0x9c
 837 018e A2010000 		.4byte	0x1a2
 838 0192 0B       		.uleb128 0xb
 839 0193 A9010000 		.4byte	.LASF27
 840 0197 01       		.byte	0x1
 841 0198 7B01     		.2byte	0x17b
 842 019a 6B000000 		.4byte	0x6b
 843 019e 02       		.uleb128 0x2
 844 019f 91       		.byte	0x91
 845 01a0 77       		.sleb128 -9
 846 01a1 00       		.byte	0
 847 01a2 0D       		.uleb128 0xd
 848 01a3 72020000 		.4byte	.LASF28
 849 01a7 01       		.byte	0x1
 850 01a8 9501     		.2byte	0x195
 851 01aa 77000000 		.4byte	0x77
 852 01ae 00000000 		.4byte	.LFB9
 853 01b2 18000000 		.4byte	.LFE9-.LFB9
 854 01b6 01       		.uleb128 0x1
 855 01b7 9C       		.byte	0x9c
 856 01b8 0A       		.uleb128 0xa
 857 01b9 06000000 		.4byte	.LASF29
 858 01bd 01       		.byte	0x1
 859 01be AF01     		.2byte	0x1af
 860 01c0 00000000 		.4byte	.LFB10
 861 01c4 20000000 		.4byte	.LFE10-.LFB10
 862 01c8 01       		.uleb128 0x1
 863 01c9 9C       		.byte	0x9c
 864 01ca DE010000 		.4byte	0x1de
 865 01ce 0B       		.uleb128 0xb
 866 01cf 4A000000 		.4byte	.LASF30
 867 01d3 01       		.byte	0x1
 868 01d4 AF01     		.2byte	0x1af
 869 01d6 77000000 		.4byte	0x77
 870 01da 02       		.uleb128 0x2
 871 01db 91       		.byte	0x91
 872 01dc 76       		.sleb128 -10
 873 01dd 00       		.byte	0
 874 01de 0D       		.uleb128 0xd
 875 01df AE000000 		.4byte	.LASF31
 876 01e3 01       		.byte	0x1
 877 01e4 C801     		.2byte	0x1c8
 878 01e6 77000000 		.4byte	0x77
 879 01ea 00000000 		.4byte	.LFB11
 880 01ee 18000000 		.4byte	.LFE11-.LFB11
 881 01f2 01       		.uleb128 0x1
 882 01f3 9C       		.byte	0x9c
 883 01f4 0A       		.uleb128 0xa
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 30


 884 01f5 8D000000 		.4byte	.LASF32
 885 01f9 01       		.byte	0x1
 886 01fa E001     		.2byte	0x1e0
 887 01fc 00000000 		.4byte	.LFB12
 888 0200 20000000 		.4byte	.LFE12-.LFB12
 889 0204 01       		.uleb128 0x1
 890 0205 9C       		.byte	0x9c
 891 0206 1A020000 		.4byte	0x21a
 892 020a 0B       		.uleb128 0xb
 893 020b 1A010000 		.4byte	.LASF33
 894 020f 01       		.byte	0x1
 895 0210 E001     		.2byte	0x1e0
 896 0212 77000000 		.4byte	0x77
 897 0216 02       		.uleb128 0x2
 898 0217 91       		.byte	0x91
 899 0218 76       		.sleb128 -10
 900 0219 00       		.byte	0
 901 021a 0D       		.uleb128 0xd
 902 021b CD030000 		.4byte	.LASF34
 903 021f 01       		.byte	0x1
 904 0220 FC01     		.2byte	0x1fc
 905 0222 77000000 		.4byte	0x77
 906 0226 00000000 		.4byte	.LFB13
 907 022a 20000000 		.4byte	.LFE13-.LFB13
 908 022e 01       		.uleb128 0x1
 909 022f 9C       		.byte	0x9c
 910 0230 0E       		.uleb128 0xe
 911 0231 8B010000 		.4byte	.LASF35
 912 0235 01       		.byte	0x1
 913 0236 FB02     		.2byte	0x2fb
 914 0238 00000000 		.4byte	.LFB14
 915 023c 1A000000 		.4byte	.LFE14-.LFB14
 916 0240 01       		.uleb128 0x1
 917 0241 9C       		.byte	0x9c
 918 0242 0F       		.uleb128 0xf
 919 0243 30010000 		.4byte	.LASF40
 920 0247 01       		.byte	0x1
 921 0248 1A       		.byte	0x1a
 922 0249 6B000000 		.4byte	0x6b
 923 024d 05       		.uleb128 0x5
 924 024e 03       		.byte	0x3
 925 024f 00000000 		.4byte	tach_critical_timer_initVar
 926 0253 00       		.byte	0
 927              		.section	.debug_abbrev,"",%progbits
 928              	.Ldebug_abbrev0:
 929 0000 01       		.uleb128 0x1
 930 0001 11       		.uleb128 0x11
 931 0002 01       		.byte	0x1
 932 0003 25       		.uleb128 0x25
 933 0004 0E       		.uleb128 0xe
 934 0005 13       		.uleb128 0x13
 935 0006 0B       		.uleb128 0xb
 936 0007 03       		.uleb128 0x3
 937 0008 0E       		.uleb128 0xe
 938 0009 1B       		.uleb128 0x1b
 939 000a 0E       		.uleb128 0xe
 940 000b 55       		.uleb128 0x55
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 31


 941 000c 17       		.uleb128 0x17
 942 000d 11       		.uleb128 0x11
 943 000e 01       		.uleb128 0x1
 944 000f 10       		.uleb128 0x10
 945 0010 17       		.uleb128 0x17
 946 0011 00       		.byte	0
 947 0012 00       		.byte	0
 948 0013 02       		.uleb128 0x2
 949 0014 24       		.uleb128 0x24
 950 0015 00       		.byte	0
 951 0016 0B       		.uleb128 0xb
 952 0017 0B       		.uleb128 0xb
 953 0018 3E       		.uleb128 0x3e
 954 0019 0B       		.uleb128 0xb
 955 001a 03       		.uleb128 0x3
 956 001b 0E       		.uleb128 0xe
 957 001c 00       		.byte	0
 958 001d 00       		.byte	0
 959 001e 03       		.uleb128 0x3
 960 001f 24       		.uleb128 0x24
 961 0020 00       		.byte	0
 962 0021 0B       		.uleb128 0xb
 963 0022 0B       		.uleb128 0xb
 964 0023 3E       		.uleb128 0x3e
 965 0024 0B       		.uleb128 0xb
 966 0025 03       		.uleb128 0x3
 967 0026 08       		.uleb128 0x8
 968 0027 00       		.byte	0
 969 0028 00       		.byte	0
 970 0029 04       		.uleb128 0x4
 971 002a 16       		.uleb128 0x16
 972 002b 00       		.byte	0
 973 002c 03       		.uleb128 0x3
 974 002d 0E       		.uleb128 0xe
 975 002e 3A       		.uleb128 0x3a
 976 002f 0B       		.uleb128 0xb
 977 0030 3B       		.uleb128 0x3b
 978 0031 05       		.uleb128 0x5
 979 0032 49       		.uleb128 0x49
 980 0033 13       		.uleb128 0x13
 981 0034 00       		.byte	0
 982 0035 00       		.byte	0
 983 0036 05       		.uleb128 0x5
 984 0037 35       		.uleb128 0x35
 985 0038 00       		.byte	0
 986 0039 49       		.uleb128 0x49
 987 003a 13       		.uleb128 0x13
 988 003b 00       		.byte	0
 989 003c 00       		.byte	0
 990 003d 06       		.uleb128 0x6
 991 003e 2E       		.uleb128 0x2e
 992 003f 01       		.byte	0x1
 993 0040 3F       		.uleb128 0x3f
 994 0041 19       		.uleb128 0x19
 995 0042 03       		.uleb128 0x3
 996 0043 0E       		.uleb128 0xe
 997 0044 3A       		.uleb128 0x3a
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 32


 998 0045 0B       		.uleb128 0xb
 999 0046 3B       		.uleb128 0x3b
 1000 0047 0B       		.uleb128 0xb
 1001 0048 27       		.uleb128 0x27
 1002 0049 19       		.uleb128 0x19
 1003 004a 11       		.uleb128 0x11
 1004 004b 01       		.uleb128 0x1
 1005 004c 12       		.uleb128 0x12
 1006 004d 06       		.uleb128 0x6
 1007 004e 40       		.uleb128 0x40
 1008 004f 18       		.uleb128 0x18
 1009 0050 9642     		.uleb128 0x2116
 1010 0052 19       		.uleb128 0x19
 1011 0053 01       		.uleb128 0x1
 1012 0054 13       		.uleb128 0x13
 1013 0055 00       		.byte	0
 1014 0056 00       		.byte	0
 1015 0057 07       		.uleb128 0x7
 1016 0058 34       		.uleb128 0x34
 1017 0059 00       		.byte	0
 1018 005a 03       		.uleb128 0x3
 1019 005b 0E       		.uleb128 0xe
 1020 005c 3A       		.uleb128 0x3a
 1021 005d 0B       		.uleb128 0xb
 1022 005e 3B       		.uleb128 0x3b
 1023 005f 0B       		.uleb128 0xb
 1024 0060 49       		.uleb128 0x49
 1025 0061 13       		.uleb128 0x13
 1026 0062 02       		.uleb128 0x2
 1027 0063 18       		.uleb128 0x18
 1028 0064 00       		.byte	0
 1029 0065 00       		.byte	0
 1030 0066 08       		.uleb128 0x8
 1031 0067 2E       		.uleb128 0x2e
 1032 0068 00       		.byte	0
 1033 0069 3F       		.uleb128 0x3f
 1034 006a 19       		.uleb128 0x19
 1035 006b 03       		.uleb128 0x3
 1036 006c 0E       		.uleb128 0xe
 1037 006d 3A       		.uleb128 0x3a
 1038 006e 0B       		.uleb128 0xb
 1039 006f 3B       		.uleb128 0x3b
 1040 0070 0B       		.uleb128 0xb
 1041 0071 27       		.uleb128 0x27
 1042 0072 19       		.uleb128 0x19
 1043 0073 11       		.uleb128 0x11
 1044 0074 01       		.uleb128 0x1
 1045 0075 12       		.uleb128 0x12
 1046 0076 06       		.uleb128 0x6
 1047 0077 40       		.uleb128 0x40
 1048 0078 18       		.uleb128 0x18
 1049 0079 9742     		.uleb128 0x2117
 1050 007b 19       		.uleb128 0x19
 1051 007c 00       		.byte	0
 1052 007d 00       		.byte	0
 1053 007e 09       		.uleb128 0x9
 1054 007f 2E       		.uleb128 0x2e
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 33


 1055 0080 00       		.byte	0
 1056 0081 3F       		.uleb128 0x3f
 1057 0082 19       		.uleb128 0x19
 1058 0083 03       		.uleb128 0x3
 1059 0084 0E       		.uleb128 0xe
 1060 0085 3A       		.uleb128 0x3a
 1061 0086 0B       		.uleb128 0xb
 1062 0087 3B       		.uleb128 0x3b
 1063 0088 0B       		.uleb128 0xb
 1064 0089 27       		.uleb128 0x27
 1065 008a 19       		.uleb128 0x19
 1066 008b 11       		.uleb128 0x11
 1067 008c 01       		.uleb128 0x1
 1068 008d 12       		.uleb128 0x12
 1069 008e 06       		.uleb128 0x6
 1070 008f 40       		.uleb128 0x40
 1071 0090 18       		.uleb128 0x18
 1072 0091 9642     		.uleb128 0x2116
 1073 0093 19       		.uleb128 0x19
 1074 0094 00       		.byte	0
 1075 0095 00       		.byte	0
 1076 0096 0A       		.uleb128 0xa
 1077 0097 2E       		.uleb128 0x2e
 1078 0098 01       		.byte	0x1
 1079 0099 3F       		.uleb128 0x3f
 1080 009a 19       		.uleb128 0x19
 1081 009b 03       		.uleb128 0x3
 1082 009c 0E       		.uleb128 0xe
 1083 009d 3A       		.uleb128 0x3a
 1084 009e 0B       		.uleb128 0xb
 1085 009f 3B       		.uleb128 0x3b
 1086 00a0 05       		.uleb128 0x5
 1087 00a1 27       		.uleb128 0x27
 1088 00a2 19       		.uleb128 0x19
 1089 00a3 11       		.uleb128 0x11
 1090 00a4 01       		.uleb128 0x1
 1091 00a5 12       		.uleb128 0x12
 1092 00a6 06       		.uleb128 0x6
 1093 00a7 40       		.uleb128 0x40
 1094 00a8 18       		.uleb128 0x18
 1095 00a9 9742     		.uleb128 0x2117
 1096 00ab 19       		.uleb128 0x19
 1097 00ac 01       		.uleb128 0x1
 1098 00ad 13       		.uleb128 0x13
 1099 00ae 00       		.byte	0
 1100 00af 00       		.byte	0
 1101 00b0 0B       		.uleb128 0xb
 1102 00b1 05       		.uleb128 0x5
 1103 00b2 00       		.byte	0
 1104 00b3 03       		.uleb128 0x3
 1105 00b4 0E       		.uleb128 0xe
 1106 00b5 3A       		.uleb128 0x3a
 1107 00b6 0B       		.uleb128 0xb
 1108 00b7 3B       		.uleb128 0x3b
 1109 00b8 05       		.uleb128 0x5
 1110 00b9 49       		.uleb128 0x49
 1111 00ba 13       		.uleb128 0x13
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 34


 1112 00bb 02       		.uleb128 0x2
 1113 00bc 18       		.uleb128 0x18
 1114 00bd 00       		.byte	0
 1115 00be 00       		.byte	0
 1116 00bf 0C       		.uleb128 0xc
 1117 00c0 2E       		.uleb128 0x2e
 1118 00c1 00       		.byte	0
 1119 00c2 3F       		.uleb128 0x3f
 1120 00c3 19       		.uleb128 0x19
 1121 00c4 03       		.uleb128 0x3
 1122 00c5 0E       		.uleb128 0xe
 1123 00c6 3A       		.uleb128 0x3a
 1124 00c7 0B       		.uleb128 0xb
 1125 00c8 3B       		.uleb128 0x3b
 1126 00c9 05       		.uleb128 0x5
 1127 00ca 27       		.uleb128 0x27
 1128 00cb 19       		.uleb128 0x19
 1129 00cc 11       		.uleb128 0x11
 1130 00cd 01       		.uleb128 0x1
 1131 00ce 12       		.uleb128 0x12
 1132 00cf 06       		.uleb128 0x6
 1133 00d0 40       		.uleb128 0x40
 1134 00d1 18       		.uleb128 0x18
 1135 00d2 9742     		.uleb128 0x2117
 1136 00d4 19       		.uleb128 0x19
 1137 00d5 00       		.byte	0
 1138 00d6 00       		.byte	0
 1139 00d7 0D       		.uleb128 0xd
 1140 00d8 2E       		.uleb128 0x2e
 1141 00d9 00       		.byte	0
 1142 00da 3F       		.uleb128 0x3f
 1143 00db 19       		.uleb128 0x19
 1144 00dc 03       		.uleb128 0x3
 1145 00dd 0E       		.uleb128 0xe
 1146 00de 3A       		.uleb128 0x3a
 1147 00df 0B       		.uleb128 0xb
 1148 00e0 3B       		.uleb128 0x3b
 1149 00e1 05       		.uleb128 0x5
 1150 00e2 27       		.uleb128 0x27
 1151 00e3 19       		.uleb128 0x19
 1152 00e4 49       		.uleb128 0x49
 1153 00e5 13       		.uleb128 0x13
 1154 00e6 11       		.uleb128 0x11
 1155 00e7 01       		.uleb128 0x1
 1156 00e8 12       		.uleb128 0x12
 1157 00e9 06       		.uleb128 0x6
 1158 00ea 40       		.uleb128 0x40
 1159 00eb 18       		.uleb128 0x18
 1160 00ec 9742     		.uleb128 0x2117
 1161 00ee 19       		.uleb128 0x19
 1162 00ef 00       		.byte	0
 1163 00f0 00       		.byte	0
 1164 00f1 0E       		.uleb128 0xe
 1165 00f2 2E       		.uleb128 0x2e
 1166 00f3 00       		.byte	0
 1167 00f4 3F       		.uleb128 0x3f
 1168 00f5 19       		.uleb128 0x19
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 35


 1169 00f6 03       		.uleb128 0x3
 1170 00f7 0E       		.uleb128 0xe
 1171 00f8 3A       		.uleb128 0x3a
 1172 00f9 0B       		.uleb128 0xb
 1173 00fa 3B       		.uleb128 0x3b
 1174 00fb 05       		.uleb128 0x5
 1175 00fc 27       		.uleb128 0x27
 1176 00fd 19       		.uleb128 0x19
 1177 00fe 11       		.uleb128 0x11
 1178 00ff 01       		.uleb128 0x1
 1179 0100 12       		.uleb128 0x12
 1180 0101 06       		.uleb128 0x6
 1181 0102 40       		.uleb128 0x40
 1182 0103 18       		.uleb128 0x18
 1183 0104 9642     		.uleb128 0x2116
 1184 0106 19       		.uleb128 0x19
 1185 0107 00       		.byte	0
 1186 0108 00       		.byte	0
 1187 0109 0F       		.uleb128 0xf
 1188 010a 34       		.uleb128 0x34
 1189 010b 00       		.byte	0
 1190 010c 03       		.uleb128 0x3
 1191 010d 0E       		.uleb128 0xe
 1192 010e 3A       		.uleb128 0x3a
 1193 010f 0B       		.uleb128 0xb
 1194 0110 3B       		.uleb128 0x3b
 1195 0111 0B       		.uleb128 0xb
 1196 0112 49       		.uleb128 0x49
 1197 0113 13       		.uleb128 0x13
 1198 0114 3F       		.uleb128 0x3f
 1199 0115 19       		.uleb128 0x19
 1200 0116 02       		.uleb128 0x2
 1201 0117 18       		.uleb128 0x18
 1202 0118 00       		.byte	0
 1203 0119 00       		.byte	0
 1204 011a 00       		.byte	0
 1205              		.section	.debug_aranges,"",%progbits
 1206 0000 8C000000 		.4byte	0x8c
 1207 0004 0200     		.2byte	0x2
 1208 0006 00000000 		.4byte	.Ldebug_info0
 1209 000a 04       		.byte	0x4
 1210 000b 00       		.byte	0
 1211 000c 0000     		.2byte	0
 1212 000e 0000     		.2byte	0
 1213 0010 00000000 		.4byte	.LFB0
 1214 0014 4C000000 		.4byte	.LFE0-.LFB0
 1215 0018 00000000 		.4byte	.LFB1
 1216 001c 20000000 		.4byte	.LFE1-.LFB1
 1217 0020 00000000 		.4byte	.LFB2
 1218 0024 20000000 		.4byte	.LFE2-.LFB2
 1219 0028 00000000 		.4byte	.LFB3
 1220 002c 20000000 		.4byte	.LFE3-.LFB3
 1221 0030 00000000 		.4byte	.LFB4
 1222 0034 20000000 		.4byte	.LFE4-.LFB4
 1223 0038 00000000 		.4byte	.LFB5
 1224 003c 14000000 		.4byte	.LFE5-.LFB5
 1225 0040 00000000 		.4byte	.LFB6
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 36


 1226 0044 18000000 		.4byte	.LFE6-.LFB6
 1227 0048 00000000 		.4byte	.LFB7
 1228 004c 18000000 		.4byte	.LFE7-.LFB7
 1229 0050 00000000 		.4byte	.LFB8
 1230 0054 20000000 		.4byte	.LFE8-.LFB8
 1231 0058 00000000 		.4byte	.LFB9
 1232 005c 18000000 		.4byte	.LFE9-.LFB9
 1233 0060 00000000 		.4byte	.LFB10
 1234 0064 20000000 		.4byte	.LFE10-.LFB10
 1235 0068 00000000 		.4byte	.LFB11
 1236 006c 18000000 		.4byte	.LFE11-.LFB11
 1237 0070 00000000 		.4byte	.LFB12
 1238 0074 20000000 		.4byte	.LFE12-.LFB12
 1239 0078 00000000 		.4byte	.LFB13
 1240 007c 20000000 		.4byte	.LFE13-.LFB13
 1241 0080 00000000 		.4byte	.LFB14
 1242 0084 1A000000 		.4byte	.LFE14-.LFB14
 1243 0088 00000000 		.4byte	0
 1244 008c 00000000 		.4byte	0
 1245              		.section	.debug_ranges,"",%progbits
 1246              	.Ldebug_ranges0:
 1247 0000 00000000 		.4byte	.LFB0
 1248 0004 4C000000 		.4byte	.LFE0
 1249 0008 00000000 		.4byte	.LFB1
 1250 000c 20000000 		.4byte	.LFE1
 1251 0010 00000000 		.4byte	.LFB2
 1252 0014 20000000 		.4byte	.LFE2
 1253 0018 00000000 		.4byte	.LFB3
 1254 001c 20000000 		.4byte	.LFE3
 1255 0020 00000000 		.4byte	.LFB4
 1256 0024 20000000 		.4byte	.LFE4
 1257 0028 00000000 		.4byte	.LFB5
 1258 002c 14000000 		.4byte	.LFE5
 1259 0030 00000000 		.4byte	.LFB6
 1260 0034 18000000 		.4byte	.LFE6
 1261 0038 00000000 		.4byte	.LFB7
 1262 003c 18000000 		.4byte	.LFE7
 1263 0040 00000000 		.4byte	.LFB8
 1264 0044 20000000 		.4byte	.LFE8
 1265 0048 00000000 		.4byte	.LFB9
 1266 004c 18000000 		.4byte	.LFE9
 1267 0050 00000000 		.4byte	.LFB10
 1268 0054 20000000 		.4byte	.LFE10
 1269 0058 00000000 		.4byte	.LFB11
 1270 005c 18000000 		.4byte	.LFE11
 1271 0060 00000000 		.4byte	.LFB12
 1272 0064 20000000 		.4byte	.LFE12
 1273 0068 00000000 		.4byte	.LFB13
 1274 006c 20000000 		.4byte	.LFE13
 1275 0070 00000000 		.4byte	.LFB14
 1276 0074 1A000000 		.4byte	.LFE14
 1277 0078 00000000 		.4byte	0
 1278 007c 00000000 		.4byte	0
 1279              		.section	.debug_line,"",%progbits
 1280              	.Ldebug_line0:
 1281 0000 78010000 		.section	.debug_str,"MS",%progbits,1
 1281      02005000 
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 37


 1281      00000201 
 1281      FB0E0D00 
 1281      01010101 
 1282              	.LASF15:
 1283 0000 72656731 		.ascii	"reg16\000"
 1283      3600
 1284              	.LASF29:
 1285 0006 74616368 		.ascii	"tach_critical_timer_WritePeriod\000"
 1285      5F637269 
 1285      74696361 
 1285      6C5F7469 
 1285      6D65725F 
 1286              	.LASF22:
 1287 0026 74616368 		.ascii	"tach_critical_timer_SoftwareCapture\000"
 1287      5F637269 
 1287      74696361 
 1287      6C5F7469 
 1287      6D65725F 
 1288              	.LASF30:
 1289 004a 70657269 		.ascii	"period\000"
 1289      6F6400
 1290              	.LASF25:
 1291 0051 74616368 		.ascii	"tach_critical_timer_WriteControlRegister\000"
 1291      5F637269 
 1291      74696361 
 1291      6C5F7469 
 1291      6D65725F 
 1292              	.LASF3:
 1293 007a 73686F72 		.ascii	"short unsigned int\000"
 1293      7420756E 
 1293      7369676E 
 1293      65642069 
 1293      6E7400
 1294              	.LASF32:
 1295 008d 74616368 		.ascii	"tach_critical_timer_WriteCounter\000"
 1295      5F637269 
 1295      74696361 
 1295      6C5F7469 
 1295      6D65725F 
 1296              	.LASF31:
 1297 00ae 74616368 		.ascii	"tach_critical_timer_ReadCapture\000"
 1297      5F637269 
 1297      74696361 
 1297      6C5F7469 
 1297      6D65725F 
 1298              	.LASF19:
 1299 00ce 74616368 		.ascii	"tach_critical_timer_Stop\000"
 1299      5F637269 
 1299      74696361 
 1299      6C5F7469 
 1299      6D65725F 
 1300              	.LASF37:
 1301 00e7 47656E65 		.ascii	"Generated_Source\\PSoC5\\tach_critical_timer.c\000"
 1301      72617465 
 1301      645F536F 
 1301      75726365 
 1301      5C50536F 
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 38


 1302              	.LASF11:
 1303 0114 666C6F61 		.ascii	"float\000"
 1303      7400
 1304              	.LASF33:
 1305 011a 636F756E 		.ascii	"counter\000"
 1305      74657200 
 1306              	.LASF1:
 1307 0122 756E7369 		.ascii	"unsigned char\000"
 1307      676E6564 
 1307      20636861 
 1307      7200
 1308              	.LASF40:
 1309 0130 74616368 		.ascii	"tach_critical_timer_initVar\000"
 1309      5F637269 
 1309      74696361 
 1309      6C5F7469 
 1309      6D65725F 
 1310              	.LASF14:
 1311 014c 72656738 		.ascii	"reg8\000"
 1311      00
 1312              	.LASF5:
 1313 0151 6C6F6E67 		.ascii	"long unsigned int\000"
 1313      20756E73 
 1313      69676E65 
 1313      6420696E 
 1313      7400
 1314              	.LASF24:
 1315 0163 74616368 		.ascii	"tach_critical_timer_ReadControlRegister\000"
 1315      5F637269 
 1315      74696361 
 1315      6C5F7469 
 1315      6D65725F 
 1316              	.LASF35:
 1317 018b 74616368 		.ascii	"tach_critical_timer_ClearFIFO\000"
 1317      5F637269 
 1317      74696361 
 1317      6C5F7469 
 1317      6D65725F 
 1318              	.LASF27:
 1319 01a9 636F6E74 		.ascii	"control\000"
 1319      726F6C00 
 1320              	.LASF21:
 1321 01b1 74616368 		.ascii	"tach_critical_timer_SetInterruptMode\000"
 1321      5F637269 
 1321      74696361 
 1321      6C5F7469 
 1321      6D65725F 
 1322              	.LASF36:
 1323 01d6 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1323      4320342E 
 1323      392E3320 
 1323      32303135 
 1323      30333033 
 1324 0209 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1324      20726576 
 1324      6973696F 
 1324      6E203232 
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 39


 1324      31323230 
 1325 023c 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1325      66756E63 
 1325      74696F6E 
 1325      2D736563 
 1325      74696F6E 
 1326              	.LASF12:
 1327 0264 646F7562 		.ascii	"double\000"
 1327      6C6500
 1328              	.LASF10:
 1329 026b 75696E74 		.ascii	"uint16\000"
 1329      313600
 1330              	.LASF28:
 1331 0272 74616368 		.ascii	"tach_critical_timer_ReadPeriod\000"
 1331      5F637269 
 1331      74696361 
 1331      6C5F7469 
 1331      6D65725F 
 1332              	.LASF8:
 1333 0291 756E7369 		.ascii	"unsigned int\000"
 1333      676E6564 
 1333      20696E74 
 1333      00
 1334              	.LASF7:
 1335 029e 6C6F6E67 		.ascii	"long long unsigned int\000"
 1335      206C6F6E 
 1335      6720756E 
 1335      7369676E 
 1335      65642069 
 1336              	.LASF18:
 1337 02b5 74616368 		.ascii	"tach_critical_timer_Start\000"
 1337      5F637269 
 1337      74696361 
 1337      6C5F7469 
 1337      6D65725F 
 1338              	.LASF39:
 1339 02cf 74616368 		.ascii	"tach_critical_timer_interruptState\000"
 1339      5F637269 
 1339      74696361 
 1339      6C5F7469 
 1339      6D65725F 
 1340              	.LASF16:
 1341 02f2 73697A65 		.ascii	"sizetype\000"
 1341      74797065 
 1341      00
 1342              	.LASF6:
 1343 02fb 6C6F6E67 		.ascii	"long long int\000"
 1343      206C6F6E 
 1343      6720696E 
 1343      7400
 1344              	.LASF23:
 1345 0309 74616368 		.ascii	"tach_critical_timer_ReadStatusRegister\000"
 1345      5F637269 
 1345      74696361 
 1345      6C5F7469 
 1345      6D65725F 
 1346              	.LASF26:
ARM GAS  D:\Windows\AppData\Local\Temp\ccqmD49r.s 			page 40


 1347 0330 696E7465 		.ascii	"interruptMode\000"
 1347      72727570 
 1347      744D6F64 
 1347      6500
 1348              	.LASF38:
 1349 033e 443A5C44 		.ascii	"D:\\Downloads\\FRUCD\\Node-Jaguar\\Node-Jaguar\\Nod"
 1349      6F776E6C 
 1349      6F616473 
 1349      5C465255 
 1349      43445C4E 
 1350 036c 652D4A61 		.ascii	"e-Jaguar.cydsn\000"
 1350      67756172 
 1350      2E637964 
 1350      736E00
 1351              	.LASF17:
 1352 037b 74616368 		.ascii	"tach_critical_timer_Enable\000"
 1352      5F637269 
 1352      74696361 
 1352      6C5F7469 
 1352      6D65725F 
 1353              	.LASF2:
 1354 0396 73686F72 		.ascii	"short int\000"
 1354      7420696E 
 1354      7400
 1355              	.LASF9:
 1356 03a0 75696E74 		.ascii	"uint8\000"
 1356      3800
 1357              	.LASF20:
 1358 03a6 74616368 		.ascii	"tach_critical_timer_Init\000"
 1358      5F637269 
 1358      74696361 
 1358      6C5F7469 
 1358      6D65725F 
 1359              	.LASF4:
 1360 03bf 6C6F6E67 		.ascii	"long int\000"
 1360      20696E74 
 1360      00
 1361              	.LASF13:
 1362 03c8 63686172 		.ascii	"char\000"
 1362      00
 1363              	.LASF34:
 1364 03cd 74616368 		.ascii	"tach_critical_timer_ReadCounter\000"
 1364      5F637269 
 1364      74696361 
 1364      6C5F7469 
 1364      6D65725F 
 1365              	.LASF0:
 1366 03ed 7369676E 		.ascii	"signed char\000"
 1366      65642063 
 1366      68617200 
 1367              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
