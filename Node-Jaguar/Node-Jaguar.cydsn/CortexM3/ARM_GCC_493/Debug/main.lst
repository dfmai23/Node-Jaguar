ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	HVSwitch
  19              		.bss
  20              		.type	HVSwitch, %object
  21              		.size	HVSwitch, 1
  22              	HVSwitch:
  23 0000 00       		.space	1
  24              		.global	DriveSwitch
  25              		.type	DriveSwitch, %object
  26              		.size	DriveSwitch, 1
  27              	DriveSwitch:
  28 0001 00       		.space	1
  29              		.global	pedalOK
  30 0002 0000     		.align	2
  31              		.type	pedalOK, %object
  32              		.size	pedalOK, 4
  33              	pedalOK:
  34 0004 00000000 		.space	4
  35              		.section	.text.main,"ax",%progbits
  36              		.align	2
  37              		.global	main
  38              		.thumb
  39              		.thumb_func
  40              		.type	main, %function
  41              	main:
  42              	.LFB63:
  43              		.file 1 "main.c"
   1:main.c        **** #include <project.h>
   2:main.c        **** #include <stdio.h>
   3:main.c        **** #include "can_manga.h"
   4:main.c        **** #include "led_manager.h"
   5:main.c        **** 
   6:main.c        **** #define PWM_PULSE_WIDTH_STEP        (10u)
   7:main.c        **** #define SWITCH_PRESSED              (0u)
   8:main.c        **** #define PWM_MESSAGE_ID              (0x1AAu)
   9:main.c        **** #define PWM_MESSAGE_IDE             (0u)    /* Standard message */
  10:main.c        **** #define PWM_MESSAGE_IRQ             (0u)    /* No transmit IRQ */
  11:main.c        **** #define PWM_MESSAGE_RTR             (0u)    /* No RTR */
  12:main.c        **** #define CAN_RX_MAILBOX_0_SHIFT      (1u)
  13:main.c        **** #define CAN_RX_MAILBOX_1_SHIFT      (2u)
  14:main.c        **** #define DATA_SIZE                   (6u)
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 2


  15:main.c        **** #define ONE_BYTE_OFFSET             (8u)
  16:main.c        **** 
  17:main.c        **** #define PEDAL_TIMEOUT 100 // Timeout after (PEDAL_TIMEOUT * 10)ms
  18:main.c        **** extern volatile uint16_t THROTTLE_CHECK_BIT;
  19:main.c        **** 
  20:main.c        **** /* Function prototypes */
  21:main.c        **** //CY_ISR_PROTO(ISR_CAN);
  22:main.c        **** 
  23:main.c        **** /* Global variables used to store configuration and data for BASIC CAN mailbox */
  24:main.c        **** //CAN_DATA_BYTES_MSG dataPWM;
  25:main.c        **** //CAN_TX_MSG messagePWM;
  26:main.c        **** 
  27:main.c        **** /* Global variable used to store PWM pulse width value */
  28:main.c        **** //uint8 pulseWidthValue = 0u;
  29:main.c        **** 
  30:main.c        **** /* Global variable used to store receive message mailbox number */
  31:main.c        **** //volatile uint8 receiveMailboxNumber = 0xFFu;
  32:main.c        **** 
  33:main.c        **** typedef enum 
  34:main.c        **** {
  35:main.c        **** 	Startup,
  36:main.c        **** 	LV,
  37:main.c        **** 	Precharging,
  38:main.c        **** 	HV_Enabled,
  39:main.c        **** 	Drive,
  40:main.c        **** 	Fault
  41:main.c        ****     
  42:main.c        **** }Dash_State;
  43:main.c        **** 
  44:main.c        **** typedef enum 
  45:main.c        **** {
  46:main.c        **** 	OK,
  47:main.c        **** 	fromLV,
  48:main.c        **** 	fromPrecharging,
  49:main.c        **** 	fromHV_Enabled,
  50:main.c        **** 	fromDrive,
  51:main.c        ****     fromFault,
  52:main.c        ****     nodeFailure
  53:main.c        ****     
  54:main.c        **** }Error_State;
  55:main.c        **** 
  56:main.c        **** /* Switch state defines -- Active High*/ 
  57:main.c        **** #define SWITCH_ON         (1u)
  58:main.c        **** #define SWITCH_OFF        (0u)
  59:main.c        **** /* Switch debounce delay in milliseconds */
  60:main.c        **** #define SWITCH_DEBOUNCE_UNIT   (1u)
  61:main.c        **** /* Number of debounce units to count delay, before consider that switch is pressed */
  62:main.c        **** #define SWITCH_DEBOUNCE_PERIOD (10u)
  63:main.c        **** /* Function prototypes */
  64:main.c        **** static uint32 ReadSwSwitch(void);
  65:main.c        **** 
  66:main.c        **** /* Global variable used to store switch state */
  67:main.c        **** uint8 HVSwitch = SWITCH_OFF;
  68:main.c        **** uint8 DriveSwitch = SWITCH_OFF;
  69:main.c        **** //volatile Dash_State state = Startup;
  70:main.c        **** 
  71:main.c        **** // Global variables used to track status of nodes
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 3


  72:main.c        **** volatile uint32_t pedalOK = 0; // for pedal node
  73:main.c        **** 
  74:main.c        **** //CY_ISR(isr_can_handler){
  75:main.c        ****     
  76:main.c        **** //    can_send_status(state);
  77:main.c        ****     
  78:main.c        **** //}
  79:main.c        **** 
  80:main.c        **** /*******************************************************************************
  81:main.c        **** * Function Name: main
  82:main.c        **** ********************************************************************************
  83:main.c        **** *
  84:main.c        **** * Summary:
  85:main.c        **** *  main() performs the following functions:
  86:main.c        **** *  1: Initializes a structure for the Basic CAN mailbox to send messages.
  87:main.c        **** *  2: Starts the CAN and LCD components.
  88:main.c        **** *  3: When received Message 1, sends the PWM pulse width and displays
  89:main.c        **** *     received switch status and value of PWM pulse width on an LCD; 
  90:main.c        **** *     When received Message 2, display received ADC data on an LCD.
  91:main.c        **** *
  92:main.c        **** * Parameters:
  93:main.c        **** *  None.
  94:main.c        **** *
  95:main.c        **** * Return:
  96:main.c        **** *  None.
  97:main.c        **** *
  98:main.c        **** *******************************************************************************/
  99:main.c        **** 
 100:main.c        **** int main()
 101:main.c        **** {   
  44              		.loc 1 101 0
  45              		.cfi_startproc
  46              		@ args = 0, pretend = 0, frame = 24
  47              		@ frame_needed = 1, uses_anonymous_args = 0
  48 0000 90B5     		push	{r4, r7, lr}
  49              		.cfi_def_cfa_offset 12
  50              		.cfi_offset 4, -12
  51              		.cfi_offset 7, -8
  52              		.cfi_offset 14, -4
  53 0002 87B0     		sub	sp, sp, #28
  54              		.cfi_def_cfa_offset 40
  55 0004 00AF     		add	r7, sp, #0
  56              		.cfi_def_cfa_register 7
 102:main.c        ****     Dash_State state = Startup;
  57              		.loc 1 102 0
  58 0006 0023     		movs	r3, #0
  59 0008 FB75     		strb	r3, [r7, #23]
 103:main.c        ****     Error_State error_state = OK;
  60              		.loc 1 103 0
  61 000a 0023     		movs	r3, #0
  62 000c BB75     		strb	r3, [r7, #22]
 104:main.c        ****     
 105:main.c        ****     
 106:main.c        ****     //precharging time counter
 107:main.c        ****     volatile uint32_t PrechargingTimeCount = 0;
  63              		.loc 1 107 0
  64 000e 0023     		movs	r3, #0
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 4


  65 0010 7B60     		str	r3, [r7, #4]
 108:main.c        ****     uint32_t DriveTimeCount = 0;
  66              		.loc 1 108 0
  67 0012 0023     		movs	r3, #0
  68 0014 3B61     		str	r3, [r7, #16]
 109:main.c        ****     
 110:main.c        ****     //CyDelay(5000);
 111:main.c        ****     //Initialize CAN
 112:main.c        ****     //CAN_GlobalIntEnable();
 113:main.c        ****     //CAN_Init();
 114:main.c        ****     //CAN_Start();
 115:main.c        ****     
 116:main.c        ****     /* Set CAN interrupt handler to local routine */
 117:main.c        ****     //CyIntSetVector(CAN_ISR_NUMBER, ISR_CAN);   
 118:main.c        ****     
 119:main.c        ****     //CAN_Timer_Start();
 120:main.c        ****     //isr_can_StartEx(isr_can_handler);    
 121:main.c        **** 
 122:main.c        ****     CyGlobalIntEnable;
  69              		.loc 1 122 0
  70              	@ 122 "main.c" 1
  71 0016 62B6     		CPSIE   i
  72              	@ 0 "" 2
  73              		.thumb
  74              	.L35:
 123:main.c        ****     
 124:main.c        ****     //while(1){
 125:main.c        ****     //}
 126:main.c        ****     
 127:main.c        ****     //char8 txData[DATA_SIZE];
 128:main.c        ****     //uint16 adcData;
 129:main.c        ****     
 130:main.c        ****     /* BASIC CAN mailbox configuration */
 131:main.c        ****     //messagePWM.dlc = CAN_TX_DLC_MAX_VALUE;
 132:main.c        ****     //messagePWM.id  = PWM_MESSAGE_ID;
 133:main.c        ****     //messagePWM.ide = PWM_MESSAGE_IDE;
 134:main.c        ****     //messagePWM.irq = PWM_MESSAGE_IRQ;
 135:main.c        ****     //messagePWM.msg = &dataPWM;
 136:main.c        ****     //messagePWM.rtr = PWM_MESSAGE_RTR;
 137:main.c        **** 
 138:main.c        ****     ////LCD_Start();
 139:main.c        **** 
 140:main.c        ****     
 141:main.c        ****     /* Display value of ADC output on LCD */
 142:main.c        ****     //LCD_Position(0u, 0u);
 143:main.c        ****     //LCD_PrintString("ADC");
 144:main.c        **** 
 145:main.c        ****     /* Display state of switch on LCD */
 146:main.c        ****     //LCD_Position(1u, 0u);
 147:main.c        ****     //LCD_PrintString("SW");
 148:main.c        **** 
 149:main.c        ****     /* Display state of PWM pulse width on LCD */
 150:main.c        ****     //LCD_Position(0u, 10u);
 151:main.c        ****     //LCD_PrintString("PWM");
 152:main.c        **** 
 153:main.c        ****     //test_inject(data_queue, &data_tail);
 154:main.c        ****     
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 5


 155:main.c        ****     for(;;)
 156:main.c        ****     {
 157:main.c        ****         //LED_Write(~LED_ReadDataReg());    
 158:main.c        ****         
 159:main.c        ****         //can_send_status(state);
 160:main.c        ****         //CyDelay(2000);
 161:main.c        ****         
 162:main.c        ****         switch(state)
  75              		.loc 1 162 0
  76 0018 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
  77 001a 052B     		cmp	r3, #5
  78 001c 00F2A881 		bhi	.L2
  79 0020 01A2     		adr	r2, .L4
  80 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
  81 0026 00BF     		.p2align 2
  82              	.L4:
  83 0028 41000000 		.word	.L3+1
  84 002c 6B000000 		.word	.L5+1
  85 0030 BF000000 		.word	.L6+1
  86 0034 27010000 		.word	.L7+1
  87 0038 BF010000 		.word	.L8+1
  88 003c 85020000 		.word	.L9+1
  89              		.p2align 1
  90              	.L3:
  91              	.LBB2:
 163:main.c        ****         {    
 164:main.c        ****             //CyDelay(1000);
 165:main.c        ****             case Startup:   
 166:main.c        ****                 //Buzzer_Write(1);
 167:main.c        ****                 //led_driver_init();    //led_driver interferes with state machine
 168:main.c        ****                 //Buzzer_Write(0);
 169:main.c        ****                 
 170:main.c        ****                 /*
 171:main.c        ****                 //Buzzer_Write(1);
 172:main.c        ****                 write_all_tach(1);
 173:main.c        ****                 write_all_stat(1);
 174:main.c        ****                 CyDelay(50);
 175:main.c        ****                 write_all_tach(0);
 176:main.c        ****                 write_all_stat(0);
 177:main.c        ****                 CyDelay(50);
 178:main.c        ****                 //Buzzer_Write(0);
 179:main.c        ****                 */
 180:main.c        ****                 
 181:main.c        ****                 /*
 182:main.c        ****                 //Buzzer_Write(1);
 183:main.c        ****                 CyDelay(50);
 184:main.c        ****                 write_startup_stat();
 185:main.c        ****                 write_startup_tach();
 186:main.c        ****                 //Buzzer_Write(0);
 187:main.c        ****                 CyDelay(50);
 188:main.c        ****                 */
 189:main.c        ****                 
 190:main.c        ****                 Buzzer_Write(1);
  92              		.loc 1 190 0
  93 0040 0120     		movs	r0, #1
  94 0042 FFF7FEFF 		bl	Buzzer_Write
 191:main.c        ****                 
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 6


 192:main.c        ****                 //Initialize CAN
 193:main.c        ****                 CAN_GlobalIntEnable();
  95              		.loc 1 193 0
  96 0046 FFF7FEFF 		bl	CAN_GlobalIntEnable
 194:main.c        ****                 CAN_Init();
  97              		.loc 1 194 0
  98 004a FFF7FEFF 		bl	CAN_Init
 195:main.c        ****                 CAN_Start();
  99              		.loc 1 195 0
 100 004e FFF7FEFF 		bl	CAN_Start
 196:main.c        ****                 CyDelay(50);
 101              		.loc 1 196 0
 102 0052 3220     		movs	r0, #50
 103 0054 FFF7FEFF 		bl	CyDelay
 197:main.c        ****                 
 198:main.c        ****                 //CyDelay(5000);
 199:main.c        ****                 //CyDelay(5000);
 200:main.c        ****                 can_send_status(state, error_state);
 104              		.loc 1 200 0
 105 0058 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 106 005a BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 107 005c 1046     		mov	r0, r2
 108 005e 1946     		mov	r1, r3
 109 0060 FFF7FEFF 		bl	can_send_status
 201:main.c        ****                 //CyGlobalIntEnable;
 202:main.c        ****                 //CAN_GlobalIntDisable();
 203:main.c        ****                 //CyGlobalIntDisable;
 204:main.c        ****                 
 205:main.c        ****                 state = LV;        
 110              		.loc 1 205 0
 111 0064 0123     		movs	r3, #1
 112 0066 FB75     		strb	r3, [r7, #23]
 206:main.c        ****                 break;
 113              		.loc 1 206 0
 114 0068 8CE1     		b	.L10
 115              	.L5:
 207:main.c        ****             case LV:
 208:main.c        ****                 can_send_cmd(0,0,0);
 116              		.loc 1 208 0
 117 006a 0020     		movs	r0, #0
 118 006c 0021     		movs	r1, #0
 119 006e 0022     		movs	r2, #0
 120 0070 FFF7FEFF 		bl	can_send_cmd
 209:main.c        ****                 can_send_status(state, error_state);
 121              		.loc 1 209 0
 122 0074 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 123 0076 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 124 0078 1046     		mov	r0, r2
 125 007a 1946     		mov	r1, r3
 126 007c FFF7FEFF 		bl	can_send_status
 210:main.c        **** 
 211:main.c        ****                 /*
 212:main.c        ****                 LCD_Position(1u, 10u);
 213:main.c        ****                 LCD_PrintInt16(data_queue[0].id);
 214:main.c        ****                 
 215:main.c        ****                 uint16_t temp = can_read(data_queue, data_head, data_tail, 0x07FF, 0);
 216:main.c        ****                 
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 7


 217:main.c        ****                 LCD_Position(0u, 0u);
 218:main.c        ****                 LCD_PrintInt16(temp);
 219:main.c        ****                 
 220:main.c        ****                 temp = can_read(data_queue, data_head, data_tail, 0x07FF, 1);
 221:main.c        ****                 LCD_Position(1u, 0u);
 222:main.c        ****                 LCD_PrintInt8(temp);
 223:main.c        ****                 
 224:main.c        ****                 temp = can_read(data_queue, data_head, data_tail, 0x07FF, 2);
 225:main.c        ****                 LCD_Position(0u, 10u);
 226:main.c        ****                 LCD_PrintInt8(temp);
 227:main.c        ****                 */
 228:main.c        ****                 
 229:main.c        ****                 
 230:main.c        ****                 //UI
 231:main.c        ****                 
 232:main.c        ****                 Buzzer_Write(0);
 127              		.loc 1 232 0
 128 0080 0020     		movs	r0, #0
 129 0082 FFF7FEFF 		bl	Buzzer_Write
 233:main.c        ****                 
 234:main.c        ****                 //pinkish, active low
 235:main.c        ****                 RGB3_1_Write(0);
 130              		.loc 1 235 0
 131 0086 0020     		movs	r0, #0
 132 0088 FFF7FEFF 		bl	RGB3_1_Write
 236:main.c        ****                 RGB2_1_Write(1);
 133              		.loc 1 236 0
 134 008c 0120     		movs	r0, #1
 135 008e FFF7FEFF 		bl	RGB2_1_Write
 237:main.c        ****                 RGB1_1_Write(0);
 136              		.loc 1 237 0
 137 0092 0020     		movs	r0, #0
 138 0094 FFF7FEFF 		bl	RGB1_1_Write
 238:main.c        ****                 
 239:main.c        **** 
 240:main.c        ****                 if (Drive_Read())
 139              		.loc 1 240 0
 140 0098 FFF7FEFF 		bl	Drive_Read
 141 009c 0346     		mov	r3, r0
 142 009e 002B     		cmp	r3, #0
 143 00a0 04D0     		beq	.L11
 241:main.c        ****                 {
 242:main.c        ****                     state = Fault;
 144              		.loc 1 242 0
 145 00a2 0523     		movs	r3, #5
 146 00a4 FB75     		strb	r3, [r7, #23]
 243:main.c        ****                     error_state = fromLV;
 147              		.loc 1 243 0
 148 00a6 0123     		movs	r3, #1
 149 00a8 BB75     		strb	r3, [r7, #22]
 244:main.c        ****                     break;
 150              		.loc 1 244 0
 151 00aa 6BE1     		b	.L10
 152              	.L11:
 245:main.c        ****                 }
 246:main.c        ****             
 247:main.c        ****                 if (HV_Read())    /* Switch state changed status */
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 8


 153              		.loc 1 247 0
 154 00ac FFF7FEFF 		bl	HV_Read
 155 00b0 0346     		mov	r3, r0
 156 00b2 002B     		cmp	r3, #0
 157 00b4 02D0     		beq	.L12
 248:main.c        ****                 {
 249:main.c        ****                     state = Precharging;
 158              		.loc 1 249 0
 159 00b6 0223     		movs	r3, #2
 160 00b8 FB75     		strb	r3, [r7, #23]
 250:main.c        ****                     break;
 161              		.loc 1 250 0
 162 00ba 63E1     		b	.L10
 163              	.L12:
 251:main.c        ****                 } 
 252:main.c        ****                 
 253:main.c        ****             break;
 164              		.loc 1 253 0
 165 00bc 62E1     		b	.L10
 166              	.L6:
 254:main.c        ****                 
 255:main.c        ****             case Precharging:
 256:main.c        ****                 
 257:main.c        ****                 can_send_status(state, error_state);
 167              		.loc 1 257 0
 168 00be FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 169 00c0 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 170 00c2 1046     		mov	r0, r2
 171 00c4 1946     		mov	r1, r3
 172 00c6 FFF7FEFF 		bl	can_send_status
 258:main.c        ****                 
 259:main.c        ****                 //yellow
 260:main.c        ****                 RGB3_1_Write(0);
 173              		.loc 1 260 0
 174 00ca 0020     		movs	r0, #0
 175 00cc FFF7FEFF 		bl	RGB3_1_Write
 261:main.c        ****                 RGB2_1_Write(0);
 176              		.loc 1 261 0
 177 00d0 0020     		movs	r0, #0
 178 00d2 FFF7FEFF 		bl	RGB2_1_Write
 262:main.c        ****                 RGB1_1_Write(1);
 179              		.loc 1 262 0
 180 00d6 0120     		movs	r0, #1
 181 00d8 FFF7FEFF 		bl	RGB1_1_Write
 263:main.c        ****                 
 264:main.c        ****                 
 265:main.c        ****                 Buzzer_Write(0);
 182              		.loc 1 265 0
 183 00dc 0020     		movs	r0, #0
 184 00de FFF7FEFF 		bl	Buzzer_Write
 266:main.c        ****                 
 267:main.c        ****                 
 268:main.c        ****                 PrechargingTimeCount = 0;
 185              		.loc 1 268 0
 186 00e2 0023     		movs	r3, #0
 187 00e4 7B60     		str	r3, [r7, #4]
 188              	.L16:
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 9


 189              	.LBB3:
 269:main.c        ****                 
 270:main.c        ****                 while(1)
 271:main.c        ****                 {
 272:main.c        ****                     can_send_cmd(1,0,0); // setInterlock
 190              		.loc 1 272 0
 191 00e6 0120     		movs	r0, #1
 192 00e8 0021     		movs	r1, #0
 193 00ea 0022     		movs	r2, #0
 194 00ec FFF7FEFF 		bl	can_send_cmd
 273:main.c        ****                 
 274:main.c        ****                     // UNUSED //uint8_t MainState = can_read(data_queue, data_head, data_tail, 0x05
 275:main.c        ****                     uint8_t CapacitorVolt = getCapacitorVoltage(); //can_read(data_queue, data_head
 195              		.loc 1 275 0
 196 00f0 FFF7FEFF 		bl	getCapacitorVoltage
 197 00f4 0346     		mov	r3, r0
 198 00f6 3B73     		strb	r3, [r7, #12]
 276:main.c        ****                     // UNUSED //uint8_t NomialVolt =  can_read(data_queue, data_head, data_tail, 0x
 277:main.c        ****                 
 278:main.c        ****                     if(CapacitorVolt >= 0x16) // need to be tuned
 199              		.loc 1 278 0
 200 00f8 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 201 00fa 152B     		cmp	r3, #21
 202 00fc 02D9     		bls	.L13
 279:main.c        ****                     {
 280:main.c        ****                         state = HV_Enabled;
 203              		.loc 1 280 0
 204 00fe 0323     		movs	r3, #3
 205 0100 FB75     		strb	r3, [r7, #23]
 281:main.c        ****                         break;
 206              		.loc 1 281 0
 207 0102 0FE0     		b	.L14
 208              	.L13:
 282:main.c        ****                     }
 283:main.c        ****                 
 284:main.c        ****                 
 285:main.c        ****                     PrechargingTimeCount++;
 209              		.loc 1 285 0
 210 0104 7B68     		ldr	r3, [r7, #4]
 211 0106 0133     		adds	r3, r3, #1
 212 0108 7B60     		str	r3, [r7, #4]
 286:main.c        ****                 
 287:main.c        ****                     if (PrechargingTimeCount == 10)
 213              		.loc 1 287 0
 214 010a 7B68     		ldr	r3, [r7, #4]
 215 010c 0A2B     		cmp	r3, #10
 216 010e 04D1     		bne	.L15
 288:main.c        ****                     {
 289:main.c        ****                         state = Fault;
 217              		.loc 1 289 0
 218 0110 0523     		movs	r3, #5
 219 0112 FB75     		strb	r3, [r7, #23]
 290:main.c        ****                         error_state = fromPrecharging;
 220              		.loc 1 290 0
 221 0114 0223     		movs	r3, #2
 222 0116 BB75     		strb	r3, [r7, #22]
 291:main.c        ****                         break;
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 10


 223              		.loc 1 291 0
 224 0118 04E0     		b	.L14
 225              	.L15:
 292:main.c        ****                     }
 293:main.c        ****                 
 294:main.c        ****                     CyDelay(1000);
 226              		.loc 1 294 0
 227 011a 4FF47A70 		mov	r0, #1000
 228 011e FFF7FEFF 		bl	CyDelay
 229              	.LBE3:
 295:main.c        ****                 }    
 230              		.loc 1 295 0
 231 0122 E0E7     		b	.L16
 232              	.L14:
 296:main.c        ****                 
 297:main.c        ****             break;
 233              		.loc 1 297 0 discriminator 2
 234 0124 2EE1     		b	.L10
 235              	.L7:
 298:main.c        **** 	        
 299:main.c        ****             case HV_Enabled:
 300:main.c        ****                 can_send_status(state, error_state);
 236              		.loc 1 300 0
 237 0126 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 238 0128 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 239 012a 1046     		mov	r0, r2
 240 012c 1946     		mov	r1, r3
 241 012e FFF7FEFF 		bl	can_send_status
 301:main.c        ****                 
 302:main.c        ****                 // Blue
 303:main.c        ****                 RGB3_1_Write(1);
 242              		.loc 1 303 0
 243 0132 0120     		movs	r0, #1
 244 0134 FFF7FEFF 		bl	RGB3_1_Write
 304:main.c        ****                 RGB2_1_Write(1);
 245              		.loc 1 304 0
 246 0138 0120     		movs	r0, #1
 247 013a FFF7FEFF 		bl	RGB2_1_Write
 305:main.c        ****                 RGB1_1_Write(0);
 248              		.loc 1 305 0
 249 013e 0020     		movs	r0, #0
 250 0140 FFF7FEFF 		bl	RGB1_1_Write
 306:main.c        ****                 
 307:main.c        ****                 //CyDelay(5000); ///for debug
 308:main.c        ****                 
 309:main.c        ****                 Buzzer_Write(0);
 251              		.loc 1 309 0
 252 0144 0020     		movs	r0, #0
 253 0146 FFF7FEFF 		bl	Buzzer_Write
 310:main.c        ****                 
 311:main.c        ****                 if (Drive_Read())
 254              		.loc 1 311 0
 255 014a FFF7FEFF 		bl	Drive_Read
 256 014e 0346     		mov	r3, r0
 257 0150 002B     		cmp	r3, #0
 258 0152 1AD0     		beq	.L17
 312:main.c        ****                 {
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 11


 313:main.c        ****                     CyDelay(1000); // wait for the brake msg to be sent
 259              		.loc 1 313 0
 260 0154 4FF47A70 		mov	r0, #1000
 261 0158 FFF7FEFF 		bl	CyDelay
 314:main.c        ****                     if(getErrorTolerance() == 1) // 100 for error tolerance /// needs to be getErro
 262              		.loc 1 314 0
 263 015c FFF7FEFF 		bl	getErrorTolerance
 264 0160 0346     		mov	r3, r0
 265 0162 012B     		cmp	r3, #1
 266 0164 0CD1     		bne	.L18
 315:main.c        ****                     {
 316:main.c        ****                         Buzzer_Write(1);
 267              		.loc 1 316 0
 268 0166 0120     		movs	r0, #1
 269 0168 FFF7FEFF 		bl	Buzzer_Write
 317:main.c        ****                         CyDelay(1000);
 270              		.loc 1 317 0
 271 016c 4FF47A70 		mov	r0, #1000
 272 0170 FFF7FEFF 		bl	CyDelay
 318:main.c        ****                         Buzzer_Write(0);
 273              		.loc 1 318 0
 274 0174 0020     		movs	r0, #0
 275 0176 FFF7FEFF 		bl	Buzzer_Write
 319:main.c        ****                         state = Drive;
 276              		.loc 1 319 0
 277 017a 0423     		movs	r3, #4
 278 017c FB75     		strb	r3, [r7, #23]
 320:main.c        ****                         break;
 279              		.loc 1 320 0
 280 017e 01E1     		b	.L10
 281              	.L18:
 321:main.c        ****                     }
 322:main.c        ****                     else
 323:main.c        ****                     {
 324:main.c        ****                         state = Fault;
 282              		.loc 1 324 0
 283 0180 0523     		movs	r3, #5
 284 0182 FB75     		strb	r3, [r7, #23]
 325:main.c        ****                         error_state = fromHV_Enabled;
 285              		.loc 1 325 0
 286 0184 0323     		movs	r3, #3
 287 0186 BB75     		strb	r3, [r7, #22]
 326:main.c        ****                         break;
 288              		.loc 1 326 0
 289 0188 FCE0     		b	.L10
 290              	.L17:
 327:main.c        ****                     }                     
 328:main.c        ****                 }
 329:main.c        ****                 
 330:main.c        ****                 // if capacitor voltage is undervoltage, change the threshold 0x16
 331:main.c        ****                 if(!HV_Read() | getCapacitorVoltage() < 0x16)
 291              		.loc 1 331 0
 292 018a FFF7FEFF 		bl	HV_Read
 293 018e 0346     		mov	r3, r0
 294 0190 002B     		cmp	r3, #0
 295 0192 0CBF     		ite	eq
 296 0194 0123     		moveq	r3, #1
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 12


 297 0196 0023     		movne	r3, #0
 298 0198 DCB2     		uxtb	r4, r3
 299 019a FFF7FEFF 		bl	getCapacitorVoltage
 300 019e 0346     		mov	r3, r0
 301 01a0 152B     		cmp	r3, #21
 302 01a2 94BF     		ite	ls
 303 01a4 0123     		movls	r3, #1
 304 01a6 0023     		movhi	r3, #0
 305 01a8 DBB2     		uxtb	r3, r3
 306 01aa 2343     		orrs	r3, r3, r4
 307 01ac DBB2     		uxtb	r3, r3
 308 01ae 002B     		cmp	r3, #0
 309 01b0 04D0     		beq	.L19
 332:main.c        ****                 {
 333:main.c        ****                     state = LV;
 310              		.loc 1 333 0
 311 01b2 0123     		movs	r3, #1
 312 01b4 FB75     		strb	r3, [r7, #23]
 334:main.c        ****                     DriveTimeCount = 0;
 313              		.loc 1 334 0
 314 01b6 0023     		movs	r3, #0
 315 01b8 3B61     		str	r3, [r7, #16]
 335:main.c        ****                     break;
 316              		.loc 1 335 0
 317 01ba E3E0     		b	.L10
 318              	.L19:
 336:main.c        ****                 }
 337:main.c        ****                 
 338:main.c        ****             break;
 319              		.loc 1 338 0 discriminator 3
 320 01bc E2E0     		b	.L10
 321              	.L8:
 339:main.c        ****                 
 340:main.c        **** 	        case Drive:
 341:main.c        ****                 can_send_status(state, error_state);
 322              		.loc 1 341 0
 323 01be FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 324 01c0 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 325 01c2 1046     		mov	r0, r2
 326 01c4 1946     		mov	r1, r3
 327 01c6 FFF7FEFF 		bl	can_send_status
 342:main.c        ****                 
 343:main.c        ****                 // Green
 344:main.c        ****                 RGB3_1_Write(1);
 328              		.loc 1 344 0
 329 01ca 0120     		movs	r0, #1
 330 01cc FFF7FEFF 		bl	RGB3_1_Write
 345:main.c        ****                 RGB2_1_Write(0);
 331              		.loc 1 345 0
 332 01d0 0020     		movs	r0, #0
 333 01d2 FFF7FEFF 		bl	RGB2_1_Write
 346:main.c        ****                 RGB1_1_Write(1);
 334              		.loc 1 346 0
 335 01d6 0120     		movs	r0, #1
 336 01d8 FFF7FEFF 		bl	RGB1_1_Write
 347:main.c        ****                 
 348:main.c        ****                 
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 13


 349:main.c        ****                 //CyDelay(10000); // debug
 350:main.c        ****                 
 351:main.c        ****                 //Buzzer_Write(1);
 352:main.c        ****                 //CyDelay(5000);
 353:main.c        ****                 //Buzzer_Write(0);
 354:main.c        ****                 
 355:main.c        ****                 //CyDelay(500);
 356:main.c        ****                 
 357:main.c        ****                 
 358:main.c        ****                 uint8_t ACK = 0xFF;
 337              		.loc 1 358 0
 338 01dc FF23     		movs	r3, #255
 339 01de FB73     		strb	r3, [r7, #15]
 359:main.c        ****                 
 360:main.c        ****                 DriveTimeCount++;
 340              		.loc 1 360 0
 341 01e0 3B69     		ldr	r3, [r7, #16]
 342 01e2 0133     		adds	r3, r3, #1
 343 01e4 3B61     		str	r3, [r7, #16]
 361:main.c        ****                 if (DriveTimeCount > 100) //EDIT: was 100!
 344              		.loc 1 361 0
 345 01e6 3B69     		ldr	r3, [r7, #16]
 346 01e8 642B     		cmp	r3, #100
 347 01ea 05D9     		bls	.L20
 362:main.c        ****                 {
 363:main.c        ****                     DriveTimeCount = 0; 
 348              		.loc 1 363 0
 349 01ec 0023     		movs	r3, #0
 350 01ee 3B61     		str	r3, [r7, #16]
 364:main.c        ****                     ACK = getAckRx();
 351              		.loc 1 364 0
 352 01f0 FFF7FEFF 		bl	getAckRx
 353 01f4 0346     		mov	r3, r0
 354 01f6 FB73     		strb	r3, [r7, #15]
 355              	.L20:
 365:main.c        ****                 }
 366:main.c        ****    
 367:main.c        ****                 uint8_t ABS_Motor_RPM = getABSMotorRPM();
 356              		.loc 1 367 0
 357 01f8 FFF7FEFF 		bl	getABSMotorRPM
 358 01fc 0346     		mov	r3, r0
 359 01fe FB72     		strb	r3, [r7, #11]
 368:main.c        ****                 uint8_t Throttle_High = getPedalHigh(); //manga_getThrottleHigh(); // use 123 for p
 360              		.loc 1 368 0
 361 0200 FFF7FEFF 		bl	getPedalHigh
 362 0204 0346     		mov	r3, r0
 363 0206 BB73     		strb	r3, [r7, #14]
 369:main.c        ****                 uint8_t Throttle_Low = getPedalLow();   //manga_getThrottleLow();
 364              		.loc 1 369 0
 365 0208 FFF7FEFF 		bl	getPedalLow
 366 020c 0346     		mov	r3, r0
 367 020e 7B73     		strb	r3, [r7, #13]
 370:main.c        ****                 
 371:main.c        ****                 if(THROTTLE_CHECK_BIT == 1) {   //throttle disconnect if a sensor fails EV rule
 368              		.loc 1 371 0
 369 0210 5D4B     		ldr	r3, .L36
 370 0212 1B88     		ldrh	r3, [r3]	@ movhi
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 14


 371 0214 9BB2     		uxth	r3, r3
 372 0216 012B     		cmp	r3, #1
 373 0218 03D1     		bne	.L21
 372:main.c        ****                     Throttle_High = 0;
 374              		.loc 1 372 0
 375 021a 0023     		movs	r3, #0
 376 021c BB73     		strb	r3, [r7, #14]
 373:main.c        ****                     Throttle_Low = 0;
 377              		.loc 1 373 0
 378 021e 0023     		movs	r3, #0
 379 0220 7B73     		strb	r3, [r7, #13]
 380              	.L21:
 374:main.c        ****                 }
 375:main.c        ****                 can_send_cmd(1,Throttle_High,Throttle_Low); // setInterlock 
 381              		.loc 1 375 0
 382 0222 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 383 0224 9AB2     		uxth	r2, r3
 384 0226 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 385 0228 9BB2     		uxth	r3, r3
 386 022a 0120     		movs	r0, #1
 387 022c 1146     		mov	r1, r2
 388 022e 1A46     		mov	r2, r3
 389 0230 FFF7FEFF 		bl	can_send_cmd
 376:main.c        ****                 
 377:main.c        ****                 //check if everything is going well
 378:main.c        ****                 if (!HV_Read())
 390              		.loc 1 378 0
 391 0234 FFF7FEFF 		bl	HV_Read
 392 0238 0346     		mov	r3, r0
 393 023a 002B     		cmp	r3, #0
 394 023c 01D1     		bne	.L22
 379:main.c        ****                     state = LV;
 395              		.loc 1 379 0
 396 023e 0123     		movs	r3, #1
 397 0240 FB75     		strb	r3, [r7, #23]
 398              	.L22:
 380:main.c        ****                 
 381:main.c        ****                 if (!Drive_Read())
 399              		.loc 1 381 0
 400 0242 FFF7FEFF 		bl	Drive_Read
 401 0246 0346     		mov	r3, r0
 402 0248 002B     		cmp	r3, #0
 403 024a 01D1     		bne	.L23
 382:main.c        ****                     state = HV_Enabled;
 404              		.loc 1 382 0
 405 024c 0323     		movs	r3, #3
 406 024e FB75     		strb	r3, [r7, #23]
 407              	.L23:
 383:main.c        ****                 
 384:main.c        ****                 if ((ACK != 0xFF) | 
 408              		.loc 1 384 0
 409 0250 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 410 0252 FF2B     		cmp	r3, #255
 411 0254 14BF     		ite	ne
 412 0256 0123     		movne	r3, #1
 413 0258 0023     		moveq	r3, #0
 414 025a DCB2     		uxtb	r4, r3
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 15


 385:main.c        ****                     (!getCurtisHeartBeatCheck())) // EDIT: Removed | CurtisFaultCheck from this 
 415              		.loc 1 385 0
 416 025c FFF7FEFF 		bl	getCurtisHeartBeatCheck
 417 0260 0346     		mov	r3, r0
 384:main.c        ****                     (!getCurtisHeartBeatCheck())) // EDIT: Removed | CurtisFaultCheck from this 
 418              		.loc 1 384 0
 419 0262 002B     		cmp	r3, #0
 420 0264 0CBF     		ite	eq
 421 0266 0123     		moveq	r3, #1
 422 0268 0023     		movne	r3, #0
 423 026a DBB2     		uxtb	r3, r3
 424 026c 2343     		orrs	r3, r3, r4
 425 026e DBB2     		uxtb	r3, r3
 426 0270 002B     		cmp	r3, #0
 427 0272 06D0     		beq	.L24
 386:main.c        ****                 {
 387:main.c        ****                     state = Fault;
 428              		.loc 1 387 0
 429 0274 0523     		movs	r3, #5
 430 0276 FB75     		strb	r3, [r7, #23]
 388:main.c        ****                     error_state = fromDrive;
 431              		.loc 1 388 0
 432 0278 0423     		movs	r3, #4
 433 027a BB75     		strb	r3, [r7, #22]
 389:main.c        ****                     DriveTimeCount = 0;
 434              		.loc 1 389 0
 435 027c 0023     		movs	r3, #0
 436 027e 3B61     		str	r3, [r7, #16]
 390:main.c        ****                     break;
 437              		.loc 1 390 0
 438 0280 80E0     		b	.L10
 439              	.L24:
 391:main.c        ****                 }
 392:main.c        ****                 
 393:main.c        ****                     
 394:main.c        ****                 // need to map ABS_Motor_RPM into 1-253 scale.
 395:main.c        ****                 
 396:main.c        ****                 /*
 397:main.c        ****                 if (ABS_Motor_RPM>=253)
 398:main.c        ****                 {
 399:main.c        ****                     direction=-1;
 400:main.c        ****                 }
 401:main.c        ****                 else if (ABS_Motor_RPM<=1)
 402:main.c        ****                 {
 403:main.c        ****                     direction=1;
 404:main.c        ****                 }
 405:main.c        ****                 value+=direction;
 406:main.c        ****                 //CyDelay(100);
 407:main.c        ****                 */
 408:main.c        ****             break;
 440              		.loc 1 408 0 discriminator 4
 441 0282 7FE0     		b	.L10
 442              	.L9:
 409:main.c        ****                 
 410:main.c        **** 	        case Fault:
 411:main.c        ****                 can_send_status(state, error_state);
 443              		.loc 1 411 0
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 16


 444 0284 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 445 0286 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 446 0288 1046     		mov	r0, r2
 447 028a 1946     		mov	r1, r3
 448 028c FFF7FEFF 		bl	can_send_status
 412:main.c        ****                 
 413:main.c        ****                 // flashing red
 414:main.c        ****                 RGB3_1_Write(1);
 449              		.loc 1 414 0
 450 0290 0120     		movs	r0, #1
 451 0292 FFF7FEFF 		bl	RGB3_1_Write
 415:main.c        ****                 RGB2_1_Write(1);
 452              		.loc 1 415 0
 453 0296 0120     		movs	r0, #1
 454 0298 FFF7FEFF 		bl	RGB2_1_Write
 416:main.c        ****                 RGB1_1_Write(1);
 455              		.loc 1 416 0
 456 029c 0120     		movs	r0, #1
 457 029e FFF7FEFF 		bl	RGB1_1_Write
 417:main.c        ****                 
 418:main.c        ****                 
 419:main.c        ****                 RGB3_1_Write(0);
 458              		.loc 1 419 0
 459 02a2 0020     		movs	r0, #0
 460 02a4 FFF7FEFF 		bl	RGB3_1_Write
 420:main.c        ****                 CyDelay(1000);
 461              		.loc 1 420 0
 462 02a8 4FF47A70 		mov	r0, #1000
 463 02ac FFF7FEFF 		bl	CyDelay
 421:main.c        ****                 RGB3_1_Write(1);
 464              		.loc 1 421 0
 465 02b0 0120     		movs	r0, #1
 466 02b2 FFF7FEFF 		bl	RGB3_1_Write
 422:main.c        ****                 CyDelay(1000);
 467              		.loc 1 422 0
 468 02b6 4FF47A70 		mov	r0, #1000
 469 02ba FFF7FEFF 		bl	CyDelay
 423:main.c        ****                 
 424:main.c        ****                 Buzzer_Write(0);
 470              		.loc 1 424 0
 471 02be 0020     		movs	r0, #0
 472 02c0 FFF7FEFF 		bl	Buzzer_Write
 425:main.c        ****                 
 426:main.c        ****                 if(error_state == fromLV)
 473              		.loc 1 426 0
 474 02c4 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 475 02c6 012B     		cmp	r3, #1
 476 02c8 09D1     		bne	.L25
 427:main.c        ****                 {
 428:main.c        ****                     if(!Drive_Read())
 477              		.loc 1 428 0
 478 02ca FFF7FEFF 		bl	Drive_Read
 479 02ce 0346     		mov	r3, r0
 480 02d0 002B     		cmp	r3, #0
 481 02d2 4CD1     		bne	.L27
 429:main.c        ****                     {
 430:main.c        ****                         state = LV;
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 17


 482              		.loc 1 430 0
 483 02d4 0123     		movs	r3, #1
 484 02d6 FB75     		strb	r3, [r7, #23]
 431:main.c        ****                         error_state = OK;
 485              		.loc 1 431 0
 486 02d8 0023     		movs	r3, #0
 487 02da BB75     		strb	r3, [r7, #22]
 432:main.c        ****                     }
 433:main.c        ****                 }
 434:main.c        ****                 else if (error_state == fromPrecharging)
 435:main.c        ****                 {
 436:main.c        ****                     if(!Drive_Read() && !HV_Read())
 437:main.c        ****                     {
 438:main.c        ****                         state = LV;
 439:main.c        ****                         error_state = OK;
 440:main.c        ****                     }
 441:main.c        ****                 }
 442:main.c        ****                 else if (error_state == fromHV_Enabled)
 443:main.c        ****                 {
 444:main.c        ****                     if(!Drive_Read())
 445:main.c        ****                     {
 446:main.c        ****                         state = HV_Enabled;
 447:main.c        ****                         error_state = OK;
 448:main.c        ****                     }
 449:main.c        ****                 }
 450:main.c        ****                 else if (error_state == fromDrive)
 451:main.c        ****                 {   
 452:main.c        ****                     can_send_cmd(1,Throttle_High,Throttle_Low); // setInterlock
 453:main.c        ****                     
 454:main.c        ****                     CyDelay(200);
 455:main.c        ****                     
 456:main.c        ****                     // Curtis Come back online again without error
 457:main.c        ****                     if((getCurtisHeartBeatCheck())) // EDIT: Removed !(Curtis_Fault_Check(data_queu
 458:main.c        ****                     {
 459:main.c        ****                         state = LV;
 460:main.c        ****                         error_state = OK;
 461:main.c        ****                     }
 462:main.c        ****                     else if(0xFF == getAckRx()) //ACK received
 463:main.c        ****                     {
 464:main.c        ****                         state = HV_Enabled;
 465:main.c        ****                         error_state = OK;
 466:main.c        ****                     }                   
 467:main.c        ****                 }
 468:main.c        ****                 else if (error_state == nodeFailure)
 469:main.c        ****                 {
 470:main.c        ****                     state = Fault;
 471:main.c        ****                 }
 472:main.c        ****             break;
 488              		.loc 1 472 0
 489 02dc 52E0     		b	.L10
 490              	.L25:
 434:main.c        ****                 {
 491              		.loc 1 434 0
 492 02de BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 493 02e0 022B     		cmp	r3, #2
 494 02e2 0ED1     		bne	.L28
 436:main.c        ****                     {
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 18


 495              		.loc 1 436 0
 496 02e4 FFF7FEFF 		bl	Drive_Read
 497 02e8 0346     		mov	r3, r0
 498 02ea 002B     		cmp	r3, #0
 499 02ec 3FD1     		bne	.L27
 436:main.c        ****                     {
 500              		.loc 1 436 0 is_stmt 0 discriminator 1
 501 02ee FFF7FEFF 		bl	HV_Read
 502 02f2 0346     		mov	r3, r0
 503 02f4 002B     		cmp	r3, #0
 504 02f6 3AD1     		bne	.L27
 438:main.c        ****                         error_state = OK;
 505              		.loc 1 438 0 is_stmt 1
 506 02f8 0123     		movs	r3, #1
 507 02fa FB75     		strb	r3, [r7, #23]
 439:main.c        ****                     }
 508              		.loc 1 439 0
 509 02fc 0023     		movs	r3, #0
 510 02fe BB75     		strb	r3, [r7, #22]
 511              		.loc 1 472 0
 512 0300 40E0     		b	.L10
 513              	.L28:
 442:main.c        ****                 {
 514              		.loc 1 442 0
 515 0302 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 516 0304 032B     		cmp	r3, #3
 517 0306 09D1     		bne	.L30
 444:main.c        ****                     {
 518              		.loc 1 444 0
 519 0308 FFF7FEFF 		bl	Drive_Read
 520 030c 0346     		mov	r3, r0
 521 030e 002B     		cmp	r3, #0
 522 0310 2DD1     		bne	.L27
 446:main.c        ****                         error_state = OK;
 523              		.loc 1 446 0
 524 0312 0323     		movs	r3, #3
 525 0314 FB75     		strb	r3, [r7, #23]
 447:main.c        ****                     }
 526              		.loc 1 447 0
 527 0316 0023     		movs	r3, #0
 528 0318 BB75     		strb	r3, [r7, #22]
 529              		.loc 1 472 0
 530 031a 33E0     		b	.L10
 531              	.L30:
 450:main.c        ****                 {   
 532              		.loc 1 450 0
 533 031c BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 534 031e 042B     		cmp	r3, #4
 535 0320 1FD1     		bne	.L32
 452:main.c        ****                     
 536              		.loc 1 452 0
 537 0322 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 538 0324 9AB2     		uxth	r2, r3
 539 0326 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 540 0328 9BB2     		uxth	r3, r3
 541 032a 0120     		movs	r0, #1
 542 032c 1146     		mov	r1, r2
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 19


 543 032e 1A46     		mov	r2, r3
 544 0330 FFF7FEFF 		bl	can_send_cmd
 454:main.c        ****                     
 545              		.loc 1 454 0
 546 0334 C820     		movs	r0, #200
 547 0336 FFF7FEFF 		bl	CyDelay
 457:main.c        ****                     {
 548              		.loc 1 457 0
 549 033a FFF7FEFF 		bl	getCurtisHeartBeatCheck
 550 033e 0346     		mov	r3, r0
 551 0340 002B     		cmp	r3, #0
 552 0342 04D0     		beq	.L33
 459:main.c        ****                         error_state = OK;
 553              		.loc 1 459 0
 554 0344 0123     		movs	r3, #1
 555 0346 FB75     		strb	r3, [r7, #23]
 460:main.c        ****                     }
 556              		.loc 1 460 0
 557 0348 0023     		movs	r3, #0
 558 034a BB75     		strb	r3, [r7, #22]
 559 034c 0FE0     		b	.L27
 560              	.L33:
 462:main.c        ****                     {
 561              		.loc 1 462 0
 562 034e FFF7FEFF 		bl	getAckRx
 563 0352 0346     		mov	r3, r0
 564 0354 FF2B     		cmp	r3, #255
 565 0356 0AD1     		bne	.L27
 464:main.c        ****                         error_state = OK;
 566              		.loc 1 464 0
 567 0358 0323     		movs	r3, #3
 568 035a FB75     		strb	r3, [r7, #23]
 465:main.c        ****                     }                   
 569              		.loc 1 465 0
 570 035c 0023     		movs	r3, #0
 571 035e BB75     		strb	r3, [r7, #22]
 572              		.loc 1 472 0
 573 0360 10E0     		b	.L10
 574              	.L32:
 468:main.c        ****                 {
 575              		.loc 1 468 0
 576 0362 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 577 0364 062B     		cmp	r3, #6
 578 0366 02D1     		bne	.L27
 470:main.c        ****                 }
 579              		.loc 1 470 0
 580 0368 0523     		movs	r3, #5
 581 036a FB75     		strb	r3, [r7, #23]
 582              		.loc 1 472 0
 583 036c 0AE0     		b	.L10
 584              	.L27:
 585              		.loc 1 472 0 is_stmt 0 discriminator 5
 586 036e 09E0     		b	.L10
 587              	.L2:
 473:main.c        ****                 
 474:main.c        ****             default:
 475:main.c        ****                 RGB3_1_Write(1);
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 20


 588              		.loc 1 475 0 is_stmt 1
 589 0370 0120     		movs	r0, #1
 590 0372 FFF7FEFF 		bl	RGB3_1_Write
 476:main.c        ****                 RGB2_1_Write(1);
 591              		.loc 1 476 0
 592 0376 0120     		movs	r0, #1
 593 0378 FFF7FEFF 		bl	RGB2_1_Write
 477:main.c        ****                 RGB1_1_Write(1);
 594              		.loc 1 477 0
 595 037c 0120     		movs	r0, #1
 596 037e FFF7FEFF 		bl	RGB1_1_Write
 478:main.c        ****                 break;
 597              		.loc 1 478 0
 598 0382 00BF     		nop
 599              	.L10:
 600              	.LBE2:
 479:main.c        ****                 
 480:main.c        **** 
 481:main.c        ****         }// end of switch
 482:main.c        ****         
 483:main.c        ****         
 484:main.c        ****         //if (receiveMailboxNumber == CAN_RX_MAILBOX_switchStatus)
 485:main.c        ****         //{
 486:main.c        ****             //LCD_Position(1u, 3u);
 487:main.c        ****             //send
 488:main.c        ****             //if (CAN_RX_DATA_BYTE1(CAN_RX_MAILBOX_switchStatus) == SWITCH_PRESSED)
 489:main.c        ****             //{
 490:main.c        ****                 /* Display received switch status on LCD */
 491:main.c        ****             
 492:main.c        ****                 //LCD_PrintString("pressed ");
 493:main.c        **** 
 494:main.c        ****                 /* Increase the PWM pulse width */
 495:main.c        ****                 //pulseWidthValue += PWM_PULSE_WIDTH_STEP;
 496:main.c        **** 
 497:main.c        ****                 /* Send message with the new PWM pulse width */
 498:main.c        ****                 //dataPWM.byte[0u] = pulseWidthValue;
 499:main.c        ****                 //CAN_SendMsg(&messagePWM);
 500:main.c        **** 
 501:main.c        ****                 /* Display value of PWM pulse width on LCD */
 502:main.c        ****                 //LCD_Position(0u, 14u);
 503:main.c        ****                 //LCD_PrintInt8(pulseWidthValue);
 504:main.c        **** 
 505:main.c        ****             //}
 506:main.c        ****             //else
 507:main.c        ****             //{
 508:main.c        ****                 /* Display received switch status on LCD */
 509:main.c        ****             //    LCD_PrintString("released");
 510:main.c        ****             //}
 511:main.c        ****             //receiveMailboxNumber = 0xFFu;
 512:main.c        ****         //}
 513:main.c        ****         
 514:main.c        ****         //received
 515:main.c        **** 
 516:main.c        ****         //if (receiveMailboxNumber == CAN_RX_MAILBOX_ADCdata)
 517:main.c        ****         //{
 518:main.c        ****         //    adcData = ((uint16) ((uint16) CAN_RX_DATA_BYTE1(CAN_RX_MAILBOX_ADCdata) << ONE_BYTE_O
 519:main.c        ****         //    CAN_RX_DATA_BYTE2(CAN_RX_MAILBOX_ADCdata);
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 21


 520:main.c        ****             
 521:main.c        ****             /* Display received ADC data on LCD */
 522:main.c        ****        //     sprintf(txData, "%u.%.3u", (adcData / 1000u), (adcData % 1000u));
 523:main.c        ****         //    txData[DATA_SIZE - 1u] = (char8) '\0';
 524:main.c        ****             
 525:main.c        ****         //    LCD_Position(0u, 4u);
 526:main.c        ****          //   LCD_PrintString(txData);
 527:main.c        ****          //   receiveMailboxNumber = 0xFFu;
 528:main.c        ****         //}
 529:main.c        ****     } 
 601              		.loc 1 529 0 discriminator 9
 602 0384 48E6     		b	.L35
 603              	.L37:
 604 0386 00BF     		.align	2
 605              	.L36:
 606 0388 00000000 		.word	THROTTLE_CHECK_BIT
 607              		.cfi_endproc
 608              	.LFE63:
 609              		.size	main, .-main
 610              		.section	.text.ISR_CAN,"ax",%progbits
 611              		.align	2
 612              		.global	ISR_CAN
 613              		.thumb
 614              		.thumb_func
 615              		.type	ISR_CAN, %function
 616              	ISR_CAN:
 617              	.LFB64:
 530:main.c        **** }
 531:main.c        **** 
 532:main.c        **** /*
 533:main.c        **** // 0 for HV, 1 for Drive
 534:main.c        **** static uint32 ReadSwSwitch(uint8_t choice)
 535:main.c        **** {
 536:main.c        ****     uint32 heldDown;
 537:main.c        ****     uint32 swStatus;
 538:main.c        **** 
 539:main.c        ****     swStatus = 0u;  // Switch is not active 
 540:main.c        ****     heldDown = 0u;  // Reset debounce counter
 541:main.c        **** 
 542:main.c        ****     
 543:main.c        ****     if (choice)
 544:main.c        ****         swStatus = Drive_Read();
 545:main.c        ****     else
 546:main.c        ****         swStatus = HV_Read();
 547:main.c        **** 
 548:main.c        ****     return (swStatus);
 549:main.c        **** }
 550:main.c        **** */
 551:main.c        **** /*******************************************************************************
 552:main.c        **** * Function Name: ISR_CAN
 553:main.c        **** ********************************************************************************
 554:main.c        **** *
 555:main.c        **** * Summary:
 556:main.c        **** *  This ISR is executed at a Receive Message event and set receiveMailboxNumber
 557:main.c        **** *  global variable with receive message mailbox number.
 558:main.c        **** *
 559:main.c        **** * Parameters:
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 22


 560:main.c        **** *  None.
 561:main.c        **** *
 562:main.c        **** * Return:
 563:main.c        **** *  None.
 564:main.c        **** *
 565:main.c        **** *******************************************************************************/
 566:main.c        **** CY_ISR(ISR_CAN)
 567:main.c        **** {   
 618              		.loc 1 567 0
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 0
 621              		@ frame_needed = 1, uses_anonymous_args = 0
 622              		@ link register save eliminated.
 623 0000 80B4     		push	{r7}
 624              		.cfi_def_cfa_offset 4
 625              		.cfi_offset 7, -4
 626 0002 00AF     		add	r7, sp, #0
 627              		.cfi_def_cfa_register 7
 568:main.c        ****     /* Clear Receive Message flag */
 569:main.c        ****     CAN_INT_SR_REG.byte[1u] = CAN_RX_MESSAGE_MASK;
 628              		.loc 1 569 0
 629 0004 074B     		ldr	r3, .L39
 630 0006 1022     		movs	r2, #16
 631 0008 5A70     		strb	r2, [r3, #1]
 570:main.c        **** 
 571:main.c        ****     /* Set the isrFlag */
 572:main.c        ****     //isrFlag = 1u;    
 573:main.c        **** 
 574:main.c        ****     /* Acknowledges receipt of new message */
 575:main.c        ****     CAN_RX_ACK_MESSAGE(CAN_RX_MAILBOX_0);
 632              		.loc 1 575 0
 633 000a 074A     		ldr	r2, .L39+4
 634 000c 064B     		ldr	r3, .L39+4
 635 000e 1B78     		ldrb	r3, [r3]
 636 0010 DBB2     		uxtb	r3, r3
 637 0012 43F00103 		orr	r3, r3, #1
 638 0016 DBB2     		uxtb	r3, r3
 639 0018 1370     		strb	r3, [r2]
 576:main.c        **** 
 577:main.c        ****     ///* Clear Receive Message flag */
 578:main.c        ****     //CAN_INT_SR_REG.byte[1u] = CAN_RX_MESSAGE_MASK;
 579:main.c        ****     /* Switch Status message received */
 580:main.c        ****    // if ((CY_GET_REG16((reg16 *) &CAN_BUF_SR_REG.byte[0u]) & CAN_RX_MAILBOX_0_SHIFT) != 0u)
 581:main.c        ****    // {        
 582:main.c        ****    //     receiveMailboxNumber = CAN_RX_MAILBOX_switchStatus;
 583:main.c        **** 
 584:main.c        ****         /* Acknowledges receipt of new message */
 585:main.c        ****    //     CAN_RX_ACK_MESSAGE(CAN_RX_MAILBOX_switchStatus);
 586:main.c        ****    // }
 587:main.c        **** 
 588:main.c        ****     /* ADC data message received */
 589:main.c        ****    // if ((CY_GET_REG16((reg16 *) &CAN_BUF_SR_REG.byte[0u]) & CAN_RX_MAILBOX_1_SHIFT) != 0u)
 590:main.c        ****    // {
 591:main.c        ****    //     receiveMailboxNumber = CAN_RX_MAILBOX_ADCdata;
 592:main.c        **** 
 593:main.c        ****         /* Acknowledges receipt of new message */
 594:main.c        ****    //     CAN_RX_ACK_MESSAGE(CAN_RX_MAILBOX_ADCdata);
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 23


 595:main.c        ****    // }
 596:main.c        **** }
 640              		.loc 1 596 0
 641 001a BD46     		mov	sp, r7
 642              		.cfi_def_cfa_register 13
 643              		@ sp needed
 644 001c 5DF8047B 		ldr	r7, [sp], #4
 645              		.cfi_restore 7
 646              		.cfi_def_cfa_offset 0
 647 0020 7047     		bx	lr
 648              	.L40:
 649 0022 00BF     		.align	2
 650              	.L39:
 651 0024 00A00040 		.word	1073782784
 652 0028 A0A00040 		.word	1073782944
 653              		.cfi_endproc
 654              	.LFE64:
 655              		.size	ISR_CAN, .-ISR_CAN
 656              		.text
 657              	.Letext0:
 658              		.file 2 "d:\\programming\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm-n
 659              		.file 3 "d:\\programming\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm-n
 660              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 661              		.file 5 "Generated_Source\\PSoC5/CAN.h"
 662              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 663              		.section	.debug_info,"",%progbits
 664              	.Ldebug_info0:
 665 0000 5B030000 		.4byte	0x35b
 666 0004 0400     		.2byte	0x4
 667 0006 00000000 		.4byte	.Ldebug_abbrev0
 668 000a 04       		.byte	0x4
 669 000b 01       		.uleb128 0x1
 670 000c E3000000 		.4byte	.LASF60
 671 0010 01       		.byte	0x1
 672 0011 D2020000 		.4byte	.LASF61
 673 0015 D9010000 		.4byte	.LASF62
 674 0019 00000000 		.4byte	.Ldebug_ranges0+0
 675 001d 00000000 		.4byte	0
 676 0021 00000000 		.4byte	.Ldebug_line0
 677 0025 02       		.uleb128 0x2
 678 0026 01       		.byte	0x1
 679 0027 06       		.byte	0x6
 680 0028 AC000000 		.4byte	.LASF0
 681 002c 03       		.uleb128 0x3
 682 002d 7A010000 		.4byte	.LASF3
 683 0031 02       		.byte	0x2
 684 0032 1D       		.byte	0x1d
 685 0033 37000000 		.4byte	0x37
 686 0037 02       		.uleb128 0x2
 687 0038 01       		.byte	0x1
 688 0039 08       		.byte	0x8
 689 003a A4010000 		.4byte	.LASF1
 690 003e 02       		.uleb128 0x2
 691 003f 02       		.byte	0x2
 692 0040 05       		.byte	0x5
 693 0041 1D000000 		.4byte	.LASF2
 694 0045 03       		.uleb128 0x3
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 24


 695 0046 5C000000 		.4byte	.LASF4
 696 004a 02       		.byte	0x2
 697 004b 2B       		.byte	0x2b
 698 004c 50000000 		.4byte	0x50
 699 0050 02       		.uleb128 0x2
 700 0051 02       		.byte	0x2
 701 0052 07       		.byte	0x7
 702 0053 65020000 		.4byte	.LASF5
 703 0057 03       		.uleb128 0x3
 704 0058 23030000 		.4byte	.LASF6
 705 005c 02       		.byte	0x2
 706 005d 3F       		.byte	0x3f
 707 005e 62000000 		.4byte	0x62
 708 0062 02       		.uleb128 0x2
 709 0063 04       		.byte	0x4
 710 0064 05       		.byte	0x5
 711 0065 92020000 		.4byte	.LASF7
 712 0069 03       		.uleb128 0x3
 713 006a 4A000000 		.4byte	.LASF8
 714 006e 02       		.byte	0x2
 715 006f 41       		.byte	0x41
 716 0070 74000000 		.4byte	0x74
 717 0074 02       		.uleb128 0x2
 718 0075 04       		.byte	0x4
 719 0076 07       		.byte	0x7
 720 0077 DE020000 		.4byte	.LASF9
 721 007b 02       		.uleb128 0x2
 722 007c 08       		.byte	0x8
 723 007d 05       		.byte	0x5
 724 007e BE000000 		.4byte	.LASF10
 725 0082 02       		.uleb128 0x2
 726 0083 08       		.byte	0x8
 727 0084 07       		.byte	0x7
 728 0085 16020000 		.4byte	.LASF11
 729 0089 04       		.uleb128 0x4
 730 008a 04       		.byte	0x4
 731 008b 05       		.byte	0x5
 732 008c 696E7400 		.ascii	"int\000"
 733 0090 02       		.uleb128 0x2
 734 0091 04       		.byte	0x4
 735 0092 07       		.byte	0x7
 736 0093 45020000 		.4byte	.LASF12
 737 0097 03       		.uleb128 0x3
 738 0098 75000000 		.4byte	.LASF13
 739 009c 03       		.byte	0x3
 740 009d 15       		.byte	0x15
 741 009e 2C000000 		.4byte	0x2c
 742 00a2 03       		.uleb128 0x3
 743 00a3 52020000 		.4byte	.LASF14
 744 00a7 03       		.byte	0x3
 745 00a8 21       		.byte	0x21
 746 00a9 45000000 		.4byte	0x45
 747 00ad 03       		.uleb128 0x3
 748 00ae A7020000 		.4byte	.LASF15
 749 00b2 03       		.byte	0x3
 750 00b3 2C       		.byte	0x2c
 751 00b4 57000000 		.4byte	0x57
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 25


 752 00b8 03       		.uleb128 0x3
 753 00b9 2D020000 		.4byte	.LASF16
 754 00bd 03       		.byte	0x3
 755 00be 2D       		.byte	0x2d
 756 00bf 69000000 		.4byte	0x69
 757 00c3 05       		.uleb128 0x5
 758 00c4 7D000000 		.4byte	.LASF17
 759 00c8 04       		.byte	0x4
 760 00c9 3801     		.2byte	0x138
 761 00cb 37000000 		.4byte	0x37
 762 00cf 02       		.uleb128 0x2
 763 00d0 04       		.byte	0x4
 764 00d1 04       		.byte	0x4
 765 00d2 B8000000 		.4byte	.LASF18
 766 00d6 02       		.uleb128 0x2
 767 00d7 08       		.byte	0x8
 768 00d8 04       		.byte	0x4
 769 00d9 F0020000 		.4byte	.LASF19
 770 00dd 02       		.uleb128 0x2
 771 00de 01       		.byte	0x1
 772 00df 08       		.byte	0x8
 773 00e0 7F020000 		.4byte	.LASF20
 774 00e4 05       		.uleb128 0x5
 775 00e5 D9020000 		.4byte	.LASF21
 776 00e9 04       		.byte	0x4
 777 00ea E201     		.2byte	0x1e2
 778 00ec F0000000 		.4byte	0xf0
 779 00f0 06       		.uleb128 0x6
 780 00f1 C3000000 		.4byte	0xc3
 781 00f5 02       		.uleb128 0x2
 782 00f6 04       		.byte	0x4
 783 00f7 07       		.byte	0x7
 784 00f8 3C000000 		.4byte	.LASF22
 785 00fc 07       		.uleb128 0x7
 786 00fd 08       		.byte	0x8
 787 00fe 05       		.byte	0x5
 788 00ff 75       		.byte	0x75
 789 0100 11010000 		.4byte	0x111
 790 0104 08       		.uleb128 0x8
 791 0105 90010000 		.4byte	.LASF24
 792 0109 05       		.byte	0x5
 793 010a 77       		.byte	0x77
 794 010b 21010000 		.4byte	0x121
 795 010f 00       		.byte	0
 796 0110 00       		.byte	0
 797 0111 09       		.uleb128 0x9
 798 0112 E4000000 		.4byte	0xe4
 799 0116 21010000 		.4byte	0x121
 800 011a 0A       		.uleb128 0xa
 801 011b F5000000 		.4byte	0xf5
 802 011f 07       		.byte	0x7
 803 0120 00       		.byte	0
 804 0121 06       		.uleb128 0x6
 805 0122 11010000 		.4byte	0x111
 806 0126 03       		.uleb128 0x3
 807 0127 00000000 		.4byte	.LASF23
 808 012b 05       		.byte	0x5
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 26


 809 012c 78       		.byte	0x78
 810 012d FC000000 		.4byte	0xfc
 811 0131 07       		.uleb128 0x7
 812 0132 04       		.byte	0x4
 813 0133 05       		.byte	0x5
 814 0134 7B       		.byte	0x7b
 815 0135 46010000 		.4byte	0x146
 816 0139 08       		.uleb128 0x8
 817 013a 90010000 		.4byte	.LASF24
 818 013e 05       		.byte	0x5
 819 013f 7D       		.byte	0x7d
 820 0140 56010000 		.4byte	0x156
 821 0144 00       		.byte	0
 822 0145 00       		.byte	0
 823 0146 09       		.uleb128 0x9
 824 0147 E4000000 		.4byte	0xe4
 825 014b 56010000 		.4byte	0x156
 826 014f 0A       		.uleb128 0xa
 827 0150 F5000000 		.4byte	0xf5
 828 0154 03       		.byte	0x3
 829 0155 00       		.byte	0
 830 0156 06       		.uleb128 0x6
 831 0157 46010000 		.4byte	0x146
 832 015b 03       		.uleb128 0x3
 833 015c C7020000 		.4byte	.LASF25
 834 0160 05       		.byte	0x5
 835 0161 7E       		.byte	0x7e
 836 0162 31010000 		.4byte	0x131
 837 0166 07       		.uleb128 0x7
 838 0167 20       		.byte	0x20
 839 0168 05       		.byte	0x5
 840 0169 A0       		.byte	0xa0
 841 016a C3010000 		.4byte	0x1c3
 842 016e 08       		.uleb128 0x8
 843 016f AF020000 		.4byte	.LASF26
 844 0173 05       		.byte	0x5
 845 0174 A2       		.byte	0xa2
 846 0175 5B010000 		.4byte	0x15b
 847 0179 00       		.byte	0
 848 017a 08       		.uleb128 0x8
 849 017b 83000000 		.4byte	.LASF27
 850 017f 05       		.byte	0x5
 851 0180 A3       		.byte	0xa3
 852 0181 5B010000 		.4byte	0x15b
 853 0185 04       		.byte	0x4
 854 0186 08       		.uleb128 0x8
 855 0187 55000000 		.4byte	.LASF28
 856 018b 05       		.byte	0x5
 857 018c A4       		.byte	0xa4
 858 018d 26010000 		.4byte	0x126
 859 0191 08       		.byte	0x8
 860 0192 08       		.uleb128 0x8
 861 0193 5A030000 		.4byte	.LASF29
 862 0197 05       		.byte	0x5
 863 0198 A5       		.byte	0xa5
 864 0199 5B010000 		.4byte	0x15b
 865 019d 10       		.byte	0x10
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 27


 866 019e 08       		.uleb128 0x8
 867 019f 96000000 		.4byte	.LASF30
 868 01a3 05       		.byte	0x5
 869 01a4 A6       		.byte	0xa6
 870 01a5 5B010000 		.4byte	0x15b
 871 01a9 14       		.byte	0x14
 872 01aa 08       		.uleb128 0x8
 873 01ab B2010000 		.4byte	.LASF31
 874 01af 05       		.byte	0x5
 875 01b0 A7       		.byte	0xa7
 876 01b1 5B010000 		.4byte	0x15b
 877 01b5 18       		.byte	0x18
 878 01b6 08       		.uleb128 0x8
 879 01b7 78020000 		.4byte	.LASF32
 880 01bb 05       		.byte	0x5
 881 01bc A8       		.byte	0xa8
 882 01bd 5B010000 		.4byte	0x15b
 883 01c1 1C       		.byte	0x1c
 884 01c2 00       		.byte	0
 885 01c3 03       		.uleb128 0x3
 886 01c4 84020000 		.4byte	.LASF33
 887 01c8 05       		.byte	0x5
 888 01c9 A9       		.byte	0xa9
 889 01ca 66010000 		.4byte	0x166
 890 01ce 06       		.uleb128 0x6
 891 01cf B8000000 		.4byte	0xb8
 892 01d3 06       		.uleb128 0x6
 893 01d4 A2000000 		.4byte	0xa2
 894 01d8 0B       		.uleb128 0xb
 895 01d9 01       		.byte	0x1
 896 01da 01       		.byte	0x1
 897 01db 22       		.byte	0x22
 898 01dc 04020000 		.4byte	0x204
 899 01e0 0C       		.uleb128 0xc
 900 01e1 0F000000 		.4byte	.LASF34
 901 01e5 00       		.sleb128 0
 902 01e6 0D       		.uleb128 0xd
 903 01e7 4C5600   		.ascii	"LV\000"
 904 01ea 01       		.sleb128 1
 905 01eb 0C       		.uleb128 0xc
 906 01ec 84010000 		.4byte	.LASF35
 907 01f0 02       		.sleb128 2
 908 01f1 0C       		.uleb128 0xc
 909 01f2 D8000000 		.4byte	.LASF36
 910 01f6 03       		.sleb128 3
 911 01f7 0C       		.uleb128 0xc
 912 01f8 67000000 		.4byte	.LASF37
 913 01fc 04       		.sleb128 4
 914 01fd 0C       		.uleb128 0xc
 915 01fe B9010000 		.4byte	.LASF38
 916 0202 05       		.sleb128 5
 917 0203 00       		.byte	0
 918 0204 03       		.uleb128 0x3
 919 0205 BC020000 		.4byte	.LASF39
 920 0209 01       		.byte	0x1
 921 020a 2A       		.byte	0x2a
 922 020b D8010000 		.4byte	0x1d8
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 28


 923 020f 0B       		.uleb128 0xb
 924 0210 01       		.byte	0x1
 925 0211 01       		.byte	0x1
 926 0212 2D       		.byte	0x2d
 927 0213 41020000 		.4byte	0x241
 928 0217 0D       		.uleb128 0xd
 929 0218 4F4B00   		.ascii	"OK\000"
 930 021b 00       		.sleb128 0
 931 021c 0C       		.uleb128 0xc
 932 021d B5020000 		.4byte	.LASF40
 933 0221 01       		.sleb128 1
 934 0222 0C       		.uleb128 0xc
 935 0223 9C000000 		.4byte	.LASF41
 936 0227 02       		.sleb128 2
 937 0228 0C       		.uleb128 0xc
 938 0229 36020000 		.4byte	.LASF42
 939 022d 03       		.sleb128 3
 940 022e 0C       		.uleb128 0xc
 941 022f 5B020000 		.4byte	.LASF43
 942 0233 04       		.sleb128 4
 943 0234 0C       		.uleb128 0xc
 944 0235 43030000 		.4byte	.LASF44
 945 0239 05       		.sleb128 5
 946 023a 0C       		.uleb128 0xc
 947 023b CC000000 		.4byte	.LASF45
 948 023f 06       		.sleb128 6
 949 0240 00       		.byte	0
 950 0241 03       		.uleb128 0x3
 951 0242 BF010000 		.4byte	.LASF46
 952 0246 01       		.byte	0x1
 953 0247 36       		.byte	0x36
 954 0248 0F020000 		.4byte	0x20f
 955 024c 0E       		.uleb128 0xe
 956 024d 45000000 		.4byte	.LASF63
 957 0251 01       		.byte	0x1
 958 0252 64       		.byte	0x64
 959 0253 89000000 		.4byte	0x89
 960 0257 00000000 		.4byte	.LFB63
 961 025b 8C030000 		.4byte	.LFE63-.LFB63
 962 025f 01       		.uleb128 0x1
 963 0260 9C       		.byte	0x9c
 964 0261 FD020000 		.4byte	0x2fd
 965 0265 0F       		.uleb128 0xf
 966 0266 17000000 		.4byte	.LASF47
 967 026a 01       		.byte	0x1
 968 026b 66       		.byte	0x66
 969 026c 04020000 		.4byte	0x204
 970 0270 02       		.uleb128 0x2
 971 0271 91       		.byte	0x91
 972 0272 6F       		.sleb128 -17
 973 0273 0F       		.uleb128 0xf
 974 0274 9B020000 		.4byte	.LASF48
 975 0278 01       		.byte	0x1
 976 0279 67       		.byte	0x67
 977 027a 41020000 		.4byte	0x241
 978 027e 02       		.uleb128 0x2
 979 027f 91       		.byte	0x91
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 29


 980 0280 6E       		.sleb128 -18
 981 0281 0F       		.uleb128 0xf
 982 0282 27000000 		.4byte	.LASF49
 983 0286 01       		.byte	0x1
 984 0287 6B       		.byte	0x6b
 985 0288 CE010000 		.4byte	0x1ce
 986 028c 02       		.uleb128 0x2
 987 028d 91       		.byte	0x91
 988 028e 5C       		.sleb128 -36
 989 028f 0F       		.uleb128 0xf
 990 0290 95010000 		.4byte	.LASF50
 991 0294 01       		.byte	0x1
 992 0295 6C       		.byte	0x6c
 993 0296 B8000000 		.4byte	0xb8
 994 029a 02       		.uleb128 0x2
 995 029b 91       		.byte	0x91
 996 029c 68       		.sleb128 -24
 997 029d 10       		.uleb128 0x10
 998 029e 40000000 		.4byte	.LBB2
 999 02a2 44030000 		.4byte	.LBE2-.LBB2
 1000 02a6 11       		.uleb128 0x11
 1001 02a7 41434B00 		.ascii	"ACK\000"
 1002 02ab 01       		.byte	0x1
 1003 02ac 6601     		.2byte	0x166
 1004 02ae 97000000 		.4byte	0x97
 1005 02b2 02       		.uleb128 0x2
 1006 02b3 91       		.byte	0x91
 1007 02b4 67       		.sleb128 -25
 1008 02b5 12       		.uleb128 0x12
 1009 02b6 88000000 		.4byte	.LASF51
 1010 02ba 01       		.byte	0x1
 1011 02bb 6F01     		.2byte	0x16f
 1012 02bd 97000000 		.4byte	0x97
 1013 02c1 02       		.uleb128 0x2
 1014 02c2 91       		.byte	0x91
 1015 02c3 63       		.sleb128 -29
 1016 02c4 12       		.uleb128 0x12
 1017 02c5 35030000 		.4byte	.LASF52
 1018 02c9 01       		.byte	0x1
 1019 02ca 7001     		.2byte	0x170
 1020 02cc 97000000 		.4byte	0x97
 1021 02d0 02       		.uleb128 0x2
 1022 02d1 91       		.byte	0x91
 1023 02d2 66       		.sleb128 -26
 1024 02d3 12       		.uleb128 0x12
 1025 02d4 03030000 		.4byte	.LASF53
 1026 02d8 01       		.byte	0x1
 1027 02d9 7101     		.2byte	0x171
 1028 02db 97000000 		.4byte	0x97
 1029 02df 02       		.uleb128 0x2
 1030 02e0 91       		.byte	0x91
 1031 02e1 65       		.sleb128 -27
 1032 02e2 10       		.uleb128 0x10
 1033 02e3 E6000000 		.4byte	.LBB3
 1034 02e7 3C000000 		.4byte	.LBE3-.LBB3
 1035 02eb 12       		.uleb128 0x12
 1036 02ec CB010000 		.4byte	.LASF54
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 30


 1037 02f0 01       		.byte	0x1
 1038 02f1 1301     		.2byte	0x113
 1039 02f3 97000000 		.4byte	0x97
 1040 02f7 02       		.uleb128 0x2
 1041 02f8 91       		.byte	0x91
 1042 02f9 64       		.sleb128 -28
 1043 02fa 00       		.byte	0
 1044 02fb 00       		.byte	0
 1045 02fc 00       		.byte	0
 1046 02fd 13       		.uleb128 0x13
 1047 02fe 2D030000 		.4byte	.LASF64
 1048 0302 01       		.byte	0x1
 1049 0303 3602     		.2byte	0x236
 1050 0305 00000000 		.4byte	.LFB64
 1051 0309 2C000000 		.4byte	.LFE64-.LFB64
 1052 030d 01       		.uleb128 0x1
 1053 030e 9C       		.byte	0x9c
 1054 030f 14       		.uleb128 0x14
 1055 0310 4D030000 		.4byte	.LASF55
 1056 0314 06       		.byte	0x6
 1057 0315 5506     		.2byte	0x655
 1058 0317 1B030000 		.4byte	0x31b
 1059 031b 06       		.uleb128 0x6
 1060 031c AD000000 		.4byte	0xad
 1061 0320 15       		.uleb128 0x15
 1062 0321 10030000 		.4byte	.LASF56
 1063 0325 01       		.byte	0x1
 1064 0326 12       		.byte	0x12
 1065 0327 D3010000 		.4byte	0x1d3
 1066 032b 16       		.uleb128 0x16
 1067 032c 71010000 		.4byte	.LASF57
 1068 0330 01       		.byte	0x1
 1069 0331 43       		.byte	0x43
 1070 0332 C3000000 		.4byte	0xc3
 1071 0336 05       		.uleb128 0x5
 1072 0337 03       		.byte	0x3
 1073 0338 00000000 		.4byte	HVSwitch
 1074 033c 16       		.uleb128 0x16
 1075 033d F7020000 		.4byte	.LASF58
 1076 0341 01       		.byte	0x1
 1077 0342 44       		.byte	0x44
 1078 0343 C3000000 		.4byte	0xc3
 1079 0347 05       		.uleb128 0x5
 1080 0348 03       		.byte	0x3
 1081 0349 00000000 		.4byte	DriveSwitch
 1082 034d 16       		.uleb128 0x16
 1083 034e 6D000000 		.4byte	.LASF59
 1084 0352 01       		.byte	0x1
 1085 0353 48       		.byte	0x48
 1086 0354 CE010000 		.4byte	0x1ce
 1087 0358 05       		.uleb128 0x5
 1088 0359 03       		.byte	0x3
 1089 035a 00000000 		.4byte	pedalOK
 1090 035e 00       		.byte	0
 1091              		.section	.debug_abbrev,"",%progbits
 1092              	.Ldebug_abbrev0:
 1093 0000 01       		.uleb128 0x1
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 31


 1094 0001 11       		.uleb128 0x11
 1095 0002 01       		.byte	0x1
 1096 0003 25       		.uleb128 0x25
 1097 0004 0E       		.uleb128 0xe
 1098 0005 13       		.uleb128 0x13
 1099 0006 0B       		.uleb128 0xb
 1100 0007 03       		.uleb128 0x3
 1101 0008 0E       		.uleb128 0xe
 1102 0009 1B       		.uleb128 0x1b
 1103 000a 0E       		.uleb128 0xe
 1104 000b 55       		.uleb128 0x55
 1105 000c 17       		.uleb128 0x17
 1106 000d 11       		.uleb128 0x11
 1107 000e 01       		.uleb128 0x1
 1108 000f 10       		.uleb128 0x10
 1109 0010 17       		.uleb128 0x17
 1110 0011 00       		.byte	0
 1111 0012 00       		.byte	0
 1112 0013 02       		.uleb128 0x2
 1113 0014 24       		.uleb128 0x24
 1114 0015 00       		.byte	0
 1115 0016 0B       		.uleb128 0xb
 1116 0017 0B       		.uleb128 0xb
 1117 0018 3E       		.uleb128 0x3e
 1118 0019 0B       		.uleb128 0xb
 1119 001a 03       		.uleb128 0x3
 1120 001b 0E       		.uleb128 0xe
 1121 001c 00       		.byte	0
 1122 001d 00       		.byte	0
 1123 001e 03       		.uleb128 0x3
 1124 001f 16       		.uleb128 0x16
 1125 0020 00       		.byte	0
 1126 0021 03       		.uleb128 0x3
 1127 0022 0E       		.uleb128 0xe
 1128 0023 3A       		.uleb128 0x3a
 1129 0024 0B       		.uleb128 0xb
 1130 0025 3B       		.uleb128 0x3b
 1131 0026 0B       		.uleb128 0xb
 1132 0027 49       		.uleb128 0x49
 1133 0028 13       		.uleb128 0x13
 1134 0029 00       		.byte	0
 1135 002a 00       		.byte	0
 1136 002b 04       		.uleb128 0x4
 1137 002c 24       		.uleb128 0x24
 1138 002d 00       		.byte	0
 1139 002e 0B       		.uleb128 0xb
 1140 002f 0B       		.uleb128 0xb
 1141 0030 3E       		.uleb128 0x3e
 1142 0031 0B       		.uleb128 0xb
 1143 0032 03       		.uleb128 0x3
 1144 0033 08       		.uleb128 0x8
 1145 0034 00       		.byte	0
 1146 0035 00       		.byte	0
 1147 0036 05       		.uleb128 0x5
 1148 0037 16       		.uleb128 0x16
 1149 0038 00       		.byte	0
 1150 0039 03       		.uleb128 0x3
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 32


 1151 003a 0E       		.uleb128 0xe
 1152 003b 3A       		.uleb128 0x3a
 1153 003c 0B       		.uleb128 0xb
 1154 003d 3B       		.uleb128 0x3b
 1155 003e 05       		.uleb128 0x5
 1156 003f 49       		.uleb128 0x49
 1157 0040 13       		.uleb128 0x13
 1158 0041 00       		.byte	0
 1159 0042 00       		.byte	0
 1160 0043 06       		.uleb128 0x6
 1161 0044 35       		.uleb128 0x35
 1162 0045 00       		.byte	0
 1163 0046 49       		.uleb128 0x49
 1164 0047 13       		.uleb128 0x13
 1165 0048 00       		.byte	0
 1166 0049 00       		.byte	0
 1167 004a 07       		.uleb128 0x7
 1168 004b 13       		.uleb128 0x13
 1169 004c 01       		.byte	0x1
 1170 004d 0B       		.uleb128 0xb
 1171 004e 0B       		.uleb128 0xb
 1172 004f 3A       		.uleb128 0x3a
 1173 0050 0B       		.uleb128 0xb
 1174 0051 3B       		.uleb128 0x3b
 1175 0052 0B       		.uleb128 0xb
 1176 0053 01       		.uleb128 0x1
 1177 0054 13       		.uleb128 0x13
 1178 0055 00       		.byte	0
 1179 0056 00       		.byte	0
 1180 0057 08       		.uleb128 0x8
 1181 0058 0D       		.uleb128 0xd
 1182 0059 00       		.byte	0
 1183 005a 03       		.uleb128 0x3
 1184 005b 0E       		.uleb128 0xe
 1185 005c 3A       		.uleb128 0x3a
 1186 005d 0B       		.uleb128 0xb
 1187 005e 3B       		.uleb128 0x3b
 1188 005f 0B       		.uleb128 0xb
 1189 0060 49       		.uleb128 0x49
 1190 0061 13       		.uleb128 0x13
 1191 0062 38       		.uleb128 0x38
 1192 0063 0B       		.uleb128 0xb
 1193 0064 00       		.byte	0
 1194 0065 00       		.byte	0
 1195 0066 09       		.uleb128 0x9
 1196 0067 01       		.uleb128 0x1
 1197 0068 01       		.byte	0x1
 1198 0069 49       		.uleb128 0x49
 1199 006a 13       		.uleb128 0x13
 1200 006b 01       		.uleb128 0x1
 1201 006c 13       		.uleb128 0x13
 1202 006d 00       		.byte	0
 1203 006e 00       		.byte	0
 1204 006f 0A       		.uleb128 0xa
 1205 0070 21       		.uleb128 0x21
 1206 0071 00       		.byte	0
 1207 0072 49       		.uleb128 0x49
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 33


 1208 0073 13       		.uleb128 0x13
 1209 0074 2F       		.uleb128 0x2f
 1210 0075 0B       		.uleb128 0xb
 1211 0076 00       		.byte	0
 1212 0077 00       		.byte	0
 1213 0078 0B       		.uleb128 0xb
 1214 0079 04       		.uleb128 0x4
 1215 007a 01       		.byte	0x1
 1216 007b 0B       		.uleb128 0xb
 1217 007c 0B       		.uleb128 0xb
 1218 007d 3A       		.uleb128 0x3a
 1219 007e 0B       		.uleb128 0xb
 1220 007f 3B       		.uleb128 0x3b
 1221 0080 0B       		.uleb128 0xb
 1222 0081 01       		.uleb128 0x1
 1223 0082 13       		.uleb128 0x13
 1224 0083 00       		.byte	0
 1225 0084 00       		.byte	0
 1226 0085 0C       		.uleb128 0xc
 1227 0086 28       		.uleb128 0x28
 1228 0087 00       		.byte	0
 1229 0088 03       		.uleb128 0x3
 1230 0089 0E       		.uleb128 0xe
 1231 008a 1C       		.uleb128 0x1c
 1232 008b 0D       		.uleb128 0xd
 1233 008c 00       		.byte	0
 1234 008d 00       		.byte	0
 1235 008e 0D       		.uleb128 0xd
 1236 008f 28       		.uleb128 0x28
 1237 0090 00       		.byte	0
 1238 0091 03       		.uleb128 0x3
 1239 0092 08       		.uleb128 0x8
 1240 0093 1C       		.uleb128 0x1c
 1241 0094 0D       		.uleb128 0xd
 1242 0095 00       		.byte	0
 1243 0096 00       		.byte	0
 1244 0097 0E       		.uleb128 0xe
 1245 0098 2E       		.uleb128 0x2e
 1246 0099 01       		.byte	0x1
 1247 009a 3F       		.uleb128 0x3f
 1248 009b 19       		.uleb128 0x19
 1249 009c 03       		.uleb128 0x3
 1250 009d 0E       		.uleb128 0xe
 1251 009e 3A       		.uleb128 0x3a
 1252 009f 0B       		.uleb128 0xb
 1253 00a0 3B       		.uleb128 0x3b
 1254 00a1 0B       		.uleb128 0xb
 1255 00a2 49       		.uleb128 0x49
 1256 00a3 13       		.uleb128 0x13
 1257 00a4 11       		.uleb128 0x11
 1258 00a5 01       		.uleb128 0x1
 1259 00a6 12       		.uleb128 0x12
 1260 00a7 06       		.uleb128 0x6
 1261 00a8 40       		.uleb128 0x40
 1262 00a9 18       		.uleb128 0x18
 1263 00aa 9642     		.uleb128 0x2116
 1264 00ac 19       		.uleb128 0x19
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 34


 1265 00ad 01       		.uleb128 0x1
 1266 00ae 13       		.uleb128 0x13
 1267 00af 00       		.byte	0
 1268 00b0 00       		.byte	0
 1269 00b1 0F       		.uleb128 0xf
 1270 00b2 34       		.uleb128 0x34
 1271 00b3 00       		.byte	0
 1272 00b4 03       		.uleb128 0x3
 1273 00b5 0E       		.uleb128 0xe
 1274 00b6 3A       		.uleb128 0x3a
 1275 00b7 0B       		.uleb128 0xb
 1276 00b8 3B       		.uleb128 0x3b
 1277 00b9 0B       		.uleb128 0xb
 1278 00ba 49       		.uleb128 0x49
 1279 00bb 13       		.uleb128 0x13
 1280 00bc 02       		.uleb128 0x2
 1281 00bd 18       		.uleb128 0x18
 1282 00be 00       		.byte	0
 1283 00bf 00       		.byte	0
 1284 00c0 10       		.uleb128 0x10
 1285 00c1 0B       		.uleb128 0xb
 1286 00c2 01       		.byte	0x1
 1287 00c3 11       		.uleb128 0x11
 1288 00c4 01       		.uleb128 0x1
 1289 00c5 12       		.uleb128 0x12
 1290 00c6 06       		.uleb128 0x6
 1291 00c7 00       		.byte	0
 1292 00c8 00       		.byte	0
 1293 00c9 11       		.uleb128 0x11
 1294 00ca 34       		.uleb128 0x34
 1295 00cb 00       		.byte	0
 1296 00cc 03       		.uleb128 0x3
 1297 00cd 08       		.uleb128 0x8
 1298 00ce 3A       		.uleb128 0x3a
 1299 00cf 0B       		.uleb128 0xb
 1300 00d0 3B       		.uleb128 0x3b
 1301 00d1 05       		.uleb128 0x5
 1302 00d2 49       		.uleb128 0x49
 1303 00d3 13       		.uleb128 0x13
 1304 00d4 02       		.uleb128 0x2
 1305 00d5 18       		.uleb128 0x18
 1306 00d6 00       		.byte	0
 1307 00d7 00       		.byte	0
 1308 00d8 12       		.uleb128 0x12
 1309 00d9 34       		.uleb128 0x34
 1310 00da 00       		.byte	0
 1311 00db 03       		.uleb128 0x3
 1312 00dc 0E       		.uleb128 0xe
 1313 00dd 3A       		.uleb128 0x3a
 1314 00de 0B       		.uleb128 0xb
 1315 00df 3B       		.uleb128 0x3b
 1316 00e0 05       		.uleb128 0x5
 1317 00e1 49       		.uleb128 0x49
 1318 00e2 13       		.uleb128 0x13
 1319 00e3 02       		.uleb128 0x2
 1320 00e4 18       		.uleb128 0x18
 1321 00e5 00       		.byte	0
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 35


 1322 00e6 00       		.byte	0
 1323 00e7 13       		.uleb128 0x13
 1324 00e8 2E       		.uleb128 0x2e
 1325 00e9 00       		.byte	0
 1326 00ea 3F       		.uleb128 0x3f
 1327 00eb 19       		.uleb128 0x19
 1328 00ec 03       		.uleb128 0x3
 1329 00ed 0E       		.uleb128 0xe
 1330 00ee 3A       		.uleb128 0x3a
 1331 00ef 0B       		.uleb128 0xb
 1332 00f0 3B       		.uleb128 0x3b
 1333 00f1 05       		.uleb128 0x5
 1334 00f2 27       		.uleb128 0x27
 1335 00f3 19       		.uleb128 0x19
 1336 00f4 11       		.uleb128 0x11
 1337 00f5 01       		.uleb128 0x1
 1338 00f6 12       		.uleb128 0x12
 1339 00f7 06       		.uleb128 0x6
 1340 00f8 40       		.uleb128 0x40
 1341 00f9 18       		.uleb128 0x18
 1342 00fa 9742     		.uleb128 0x2117
 1343 00fc 19       		.uleb128 0x19
 1344 00fd 00       		.byte	0
 1345 00fe 00       		.byte	0
 1346 00ff 14       		.uleb128 0x14
 1347 0100 34       		.uleb128 0x34
 1348 0101 00       		.byte	0
 1349 0102 03       		.uleb128 0x3
 1350 0103 0E       		.uleb128 0xe
 1351 0104 3A       		.uleb128 0x3a
 1352 0105 0B       		.uleb128 0xb
 1353 0106 3B       		.uleb128 0x3b
 1354 0107 05       		.uleb128 0x5
 1355 0108 49       		.uleb128 0x49
 1356 0109 13       		.uleb128 0x13
 1357 010a 3F       		.uleb128 0x3f
 1358 010b 19       		.uleb128 0x19
 1359 010c 3C       		.uleb128 0x3c
 1360 010d 19       		.uleb128 0x19
 1361 010e 00       		.byte	0
 1362 010f 00       		.byte	0
 1363 0110 15       		.uleb128 0x15
 1364 0111 34       		.uleb128 0x34
 1365 0112 00       		.byte	0
 1366 0113 03       		.uleb128 0x3
 1367 0114 0E       		.uleb128 0xe
 1368 0115 3A       		.uleb128 0x3a
 1369 0116 0B       		.uleb128 0xb
 1370 0117 3B       		.uleb128 0x3b
 1371 0118 0B       		.uleb128 0xb
 1372 0119 49       		.uleb128 0x49
 1373 011a 13       		.uleb128 0x13
 1374 011b 3F       		.uleb128 0x3f
 1375 011c 19       		.uleb128 0x19
 1376 011d 3C       		.uleb128 0x3c
 1377 011e 19       		.uleb128 0x19
 1378 011f 00       		.byte	0
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 36


 1379 0120 00       		.byte	0
 1380 0121 16       		.uleb128 0x16
 1381 0122 34       		.uleb128 0x34
 1382 0123 00       		.byte	0
 1383 0124 03       		.uleb128 0x3
 1384 0125 0E       		.uleb128 0xe
 1385 0126 3A       		.uleb128 0x3a
 1386 0127 0B       		.uleb128 0xb
 1387 0128 3B       		.uleb128 0x3b
 1388 0129 0B       		.uleb128 0xb
 1389 012a 49       		.uleb128 0x49
 1390 012b 13       		.uleb128 0x13
 1391 012c 3F       		.uleb128 0x3f
 1392 012d 19       		.uleb128 0x19
 1393 012e 02       		.uleb128 0x2
 1394 012f 18       		.uleb128 0x18
 1395 0130 00       		.byte	0
 1396 0131 00       		.byte	0
 1397 0132 00       		.byte	0
 1398              		.section	.debug_aranges,"",%progbits
 1399 0000 24000000 		.4byte	0x24
 1400 0004 0200     		.2byte	0x2
 1401 0006 00000000 		.4byte	.Ldebug_info0
 1402 000a 04       		.byte	0x4
 1403 000b 00       		.byte	0
 1404 000c 0000     		.2byte	0
 1405 000e 0000     		.2byte	0
 1406 0010 00000000 		.4byte	.LFB63
 1407 0014 8C030000 		.4byte	.LFE63-.LFB63
 1408 0018 00000000 		.4byte	.LFB64
 1409 001c 2C000000 		.4byte	.LFE64-.LFB64
 1410 0020 00000000 		.4byte	0
 1411 0024 00000000 		.4byte	0
 1412              		.section	.debug_ranges,"",%progbits
 1413              	.Ldebug_ranges0:
 1414 0000 00000000 		.4byte	.LFB63
 1415 0004 8C030000 		.4byte	.LFE63
 1416 0008 00000000 		.4byte	.LFB64
 1417 000c 2C000000 		.4byte	.LFE64
 1418 0010 00000000 		.4byte	0
 1419 0014 00000000 		.4byte	0
 1420              		.section	.debug_line,"",%progbits
 1421              	.Ldebug_line0:
 1422 0000 2F020000 		.section	.debug_str,"MS",%progbits,1
 1422      02004001 
 1422      00000201 
 1422      FB0E0D00 
 1422      01010101 
 1423              	.LASF23:
 1424 0000 43414E5F 		.ascii	"CAN_DATA_BYTES\000"
 1424      44415441 
 1424      5F425954 
 1424      455300
 1425              	.LASF34:
 1426 000f 53746172 		.ascii	"Startup\000"
 1426      74757000 
 1427              	.LASF47:
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 37


 1428 0017 73746174 		.ascii	"state\000"
 1428      6500
 1429              	.LASF2:
 1430 001d 73686F72 		.ascii	"short int\000"
 1430      7420696E 
 1430      7400
 1431              	.LASF49:
 1432 0027 50726563 		.ascii	"PrechargingTimeCount\000"
 1432      68617267 
 1432      696E6754 
 1432      696D6543 
 1432      6F756E74 
 1433              	.LASF22:
 1434 003c 73697A65 		.ascii	"sizetype\000"
 1434      74797065 
 1434      00
 1435              	.LASF63:
 1436 0045 6D61696E 		.ascii	"main\000"
 1436      00
 1437              	.LASF8:
 1438 004a 5F5F7569 		.ascii	"__uint32_t\000"
 1438      6E743332 
 1438      5F7400
 1439              	.LASF28:
 1440 0055 72786461 		.ascii	"rxdata\000"
 1440      746100
 1441              	.LASF4:
 1442 005c 5F5F7569 		.ascii	"__uint16_t\000"
 1442      6E743136 
 1442      5F7400
 1443              	.LASF37:
 1444 0067 44726976 		.ascii	"Drive\000"
 1444      6500
 1445              	.LASF59:
 1446 006d 70656461 		.ascii	"pedalOK\000"
 1446      6C4F4B00 
 1447              	.LASF13:
 1448 0075 75696E74 		.ascii	"uint8_t\000"
 1448      385F7400 
 1449              	.LASF17:
 1450 007d 75696E74 		.ascii	"uint8\000"
 1450      3800
 1451              	.LASF27:
 1452 0083 72786964 		.ascii	"rxid\000"
 1452      00
 1453              	.LASF51:
 1454 0088 4142535F 		.ascii	"ABS_Motor_RPM\000"
 1454      4D6F746F 
 1454      725F5250 
 1454      4D00
 1455              	.LASF30:
 1456 0096 72786163 		.ascii	"rxacr\000"
 1456      7200
 1457              	.LASF41:
 1458 009c 66726F6D 		.ascii	"fromPrecharging\000"
 1458      50726563 
 1458      68617267 
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 38


 1458      696E6700 
 1459              	.LASF0:
 1460 00ac 7369676E 		.ascii	"signed char\000"
 1460      65642063 
 1460      68617200 
 1461              	.LASF18:
 1462 00b8 666C6F61 		.ascii	"float\000"
 1462      7400
 1463              	.LASF10:
 1464 00be 6C6F6E67 		.ascii	"long long int\000"
 1464      206C6F6E 
 1464      6720696E 
 1464      7400
 1465              	.LASF45:
 1466 00cc 6E6F6465 		.ascii	"nodeFailure\000"
 1466      4661696C 
 1466      75726500 
 1467              	.LASF36:
 1468 00d8 48565F45 		.ascii	"HV_Enabled\000"
 1468      6E61626C 
 1468      656400
 1469              	.LASF60:
 1470 00e3 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1470      4320342E 
 1470      392E3320 
 1470      32303135 
 1470      30333033 
 1471 0116 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1471      20726576 
 1471      6973696F 
 1471      6E203232 
 1471      31323230 
 1472 0149 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1472      66756E63 
 1472      74696F6E 
 1472      2D736563 
 1472      74696F6E 
 1473              	.LASF57:
 1474 0171 48565377 		.ascii	"HVSwitch\000"
 1474      69746368 
 1474      00
 1475              	.LASF3:
 1476 017a 5F5F7569 		.ascii	"__uint8_t\000"
 1476      6E74385F 
 1476      7400
 1477              	.LASF35:
 1478 0184 50726563 		.ascii	"Precharging\000"
 1478      68617267 
 1478      696E6700 
 1479              	.LASF24:
 1480 0190 62797465 		.ascii	"byte\000"
 1480      00
 1481              	.LASF50:
 1482 0195 44726976 		.ascii	"DriveTimeCount\000"
 1482      6554696D 
 1482      65436F75 
 1482      6E7400
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 39


 1483              	.LASF1:
 1484 01a4 756E7369 		.ascii	"unsigned char\000"
 1484      676E6564 
 1484      20636861 
 1484      7200
 1485              	.LASF31:
 1486 01b2 7278616D 		.ascii	"rxamrd\000"
 1486      726400
 1487              	.LASF38:
 1488 01b9 4661756C 		.ascii	"Fault\000"
 1488      7400
 1489              	.LASF46:
 1490 01bf 4572726F 		.ascii	"Error_State\000"
 1490      725F5374 
 1490      61746500 
 1491              	.LASF54:
 1492 01cb 43617061 		.ascii	"CapacitorVolt\000"
 1492      6369746F 
 1492      72566F6C 
 1492      7400
 1493              	.LASF62:
 1494 01d9 443A5C44 		.ascii	"D:\\Downloads\\FRUCD\\Node-Jaguar\\Node-Jaguar\\Nod"
 1494      6F776E6C 
 1494      6F616473 
 1494      5C465255 
 1494      43445C4E 
 1495 0207 652D4A61 		.ascii	"e-Jaguar.cydsn\000"
 1495      67756172 
 1495      2E637964 
 1495      736E00
 1496              	.LASF11:
 1497 0216 6C6F6E67 		.ascii	"long long unsigned int\000"
 1497      206C6F6E 
 1497      6720756E 
 1497      7369676E 
 1497      65642069 
 1498              	.LASF16:
 1499 022d 75696E74 		.ascii	"uint32_t\000"
 1499      33325F74 
 1499      00
 1500              	.LASF42:
 1501 0236 66726F6D 		.ascii	"fromHV_Enabled\000"
 1501      48565F45 
 1501      6E61626C 
 1501      656400
 1502              	.LASF12:
 1503 0245 756E7369 		.ascii	"unsigned int\000"
 1503      676E6564 
 1503      20696E74 
 1503      00
 1504              	.LASF14:
 1505 0252 75696E74 		.ascii	"uint16_t\000"
 1505      31365F74 
 1505      00
 1506              	.LASF43:
 1507 025b 66726F6D 		.ascii	"fromDrive\000"
 1507      44726976 
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 40


 1507      6500
 1508              	.LASF5:
 1509 0265 73686F72 		.ascii	"short unsigned int\000"
 1509      7420756E 
 1509      7369676E 
 1509      65642069 
 1509      6E7400
 1510              	.LASF32:
 1511 0278 72786163 		.ascii	"rxacrd\000"
 1511      726400
 1512              	.LASF20:
 1513 027f 63686172 		.ascii	"char\000"
 1513      00
 1514              	.LASF33:
 1515 0284 43414E5F 		.ascii	"CAN_RX_STRUCT\000"
 1515      52585F53 
 1515      54525543 
 1515      5400
 1516              	.LASF7:
 1517 0292 6C6F6E67 		.ascii	"long int\000"
 1517      20696E74 
 1517      00
 1518              	.LASF48:
 1519 029b 6572726F 		.ascii	"error_state\000"
 1519      725F7374 
 1519      61746500 
 1520              	.LASF15:
 1521 02a7 696E7433 		.ascii	"int32_t\000"
 1521      325F7400 
 1522              	.LASF26:
 1523 02af 7278636D 		.ascii	"rxcmd\000"
 1523      6400
 1524              	.LASF40:
 1525 02b5 66726F6D 		.ascii	"fromLV\000"
 1525      4C5600
 1526              	.LASF39:
 1527 02bc 44617368 		.ascii	"Dash_State\000"
 1527      5F537461 
 1527      746500
 1528              	.LASF25:
 1529 02c7 43414E5F 		.ascii	"CAN_REG_32\000"
 1529      5245475F 
 1529      333200
 1530              	.LASF61:
 1531 02d2 6D61696E 		.ascii	"main.c\000"
 1531      2E6300
 1532              	.LASF21:
 1533 02d9 72656738 		.ascii	"reg8\000"
 1533      00
 1534              	.LASF9:
 1535 02de 6C6F6E67 		.ascii	"long unsigned int\000"
 1535      20756E73 
 1535      69676E65 
 1535      6420696E 
 1535      7400
 1536              	.LASF19:
 1537 02f0 646F7562 		.ascii	"double\000"
ARM GAS  D:\Windows\AppData\Local\Temp\ccnzGdUc.s 			page 41


 1537      6C6500
 1538              	.LASF58:
 1539 02f7 44726976 		.ascii	"DriveSwitch\000"
 1539      65537769 
 1539      74636800 
 1540              	.LASF53:
 1541 0303 5468726F 		.ascii	"Throttle_Low\000"
 1541      74746C65 
 1541      5F4C6F77 
 1541      00
 1542              	.LASF56:
 1543 0310 5448524F 		.ascii	"THROTTLE_CHECK_BIT\000"
 1543      54544C45 
 1543      5F434845 
 1543      434B5F42 
 1543      495400
 1544              	.LASF6:
 1545 0323 5F5F696E 		.ascii	"__int32_t\000"
 1545      7433325F 
 1545      7400
 1546              	.LASF64:
 1547 032d 4953525F 		.ascii	"ISR_CAN\000"
 1547      43414E00 
 1548              	.LASF52:
 1549 0335 5468726F 		.ascii	"Throttle_High\000"
 1549      74746C65 
 1549      5F486967 
 1549      6800
 1550              	.LASF44:
 1551 0343 66726F6D 		.ascii	"fromFault\000"
 1551      4661756C 
 1551      7400
 1552              	.LASF55:
 1553 034d 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1553      52784275 
 1553      66666572 
 1553      00
 1554              	.LASF29:
 1555 035a 7278616D 		.ascii	"rxamr\000"
 1555      7200
 1556              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
